{"file_contents":{"NETWORK_INTEGRATION_GUIDE.md":{"content":"# Network Equipment Integration Guide\n\n## Overview\n\nThis guide walks you through connecting your WiFi voucher management system to actual network equipment. The system supports multiple router types and provides a complete integration framework.\n\n## Supported Equipment\n\n### 1. MikroTik Routers (RouterOS)\n- **Models**: hAP, RouterBoard series, CCR series\n- **Protocol**: RouterOS API (Port 8728)\n- **Features**: Full hotspot management, bandwidth control, user authentication\n\n### 2. pfSense Firewalls\n- **Protocol**: HTTPS API (Port 443)\n- **Features**: Captive portal, voucher management, bandwidth shaping\n\n### 3. Generic RADIUS Equipment\n- **Protocol**: RADIUS (Port 1812/1813)\n- **Compatible with**: UniFi, OpenWRT, DD-WRT, any RADIUS-capable device\n\n## Step-by-Step Integration Process\n\n### Phase 1: System Preparation\n\n1. **Access Admin Panel**\n   - Login to your admin interface at `/admin/login`\n   - Navigate to \"Network Equipment\" in the sidebar\n\n2. **Choose Equipment Type**\n   - Select your router type from the dropdown\n   - System will auto-configure appropriate settings\n\n### Phase 2: Network Equipment Configuration\n\n#### For MikroTik RouterOS:\n\n1. **Enable API Access**\n   ```\n   /ip service enable api\n   /ip service set api port=8728\n   ```\n\n2. **Create Hotspot**\n   ```\n   /interface wireless security-profiles add name=hotspot authentication-types=wpa2-psk\n   /ip hotspot add name=voucher-hotspot interface=wlan1\n   ```\n\n3. **Configure User Profiles**\n   ```\n   /ip hotspot user profile add name=voucher-basic rate-limit=10M/2M\n   /ip hotspot user profile add name=voucher-premium rate-limit=50M/10M\n   ```\n\n#### For pfSense:\n\n1. **Enable Captive Portal**\n   - Navigate to Services → Captive Portal\n   - Enable portal on LAN interface\n   - Configure voucher authentication\n\n2. **API Configuration**\n   - System → User Manager → Settings\n   - Enable API access\n   - Generate API credentials\n\n#### For Generic RADIUS:\n\n1. **Configure RADIUS Server**\n   - Install FreeRADIUS or similar\n   - Configure clients (your access points)\n   - Set shared secret\n\n2. **Access Point Configuration**\n   - Point AP to RADIUS server\n   - Configure captive portal redirection\n\n### Phase 3: System Configuration\n\n1. **Update Network Settings**\n   - Router IP: Your equipment's management IP\n   - Port: API port (8728 for MikroTik, 443 for pfSense)\n   - Credentials: Admin username and password\n   - RADIUS Secret: Shared authentication secret\n\n2. **Test Connection**\n   - Use \"Test Connection\" button in admin panel\n   - Verify successful communication\n\n3. **Configure Network Parameters**\n   - Client subnet (e.g., 192.168.100.0/24)\n   - DNS servers\n   - Captive portal URL\n\n### Phase 4: Voucher Plan Mapping\n\nThe system automatically maps voucher plans to network policies:\n\n- **Basic Plan**: 10 Mbps down, 2 Mbps up, 4-hour session\n- **Premium Plan**: 50 Mbps down, 10 Mbps up, 24-hour session\n- **Guest Plan**: 5 Mbps down, 1 Mbps up, 1-hour session\n- **Business Plan**: 100 Mbps down, 20 Mbps up, unlimited session\n\n## Environment Variables\n\nSet these environment variables for production deployment:\n\n```bash\n# Router Configuration\nROUTER_HOST=192.168.1.1\nROUTER_PORT=8728\nROUTER_USERNAME=admin\nROUTER_PASSWORD=your_router_password\n\n# RADIUS Configuration  \nRADIUS_HOST=192.168.1.1\nRADIUS_PORT=1812\nRADIUS_SECRET=your_radius_secret\n\n# Network Settings\nEQUIPMENT_TYPE=mikrotik_hap\nHOTSPOT_INTERFACE=wlan1\nCLIENT_NETWORK=192.168.100.0/24\nDNS_SERVERS=8.8.8.8,8.8.4.4\n\n# Portal Settings\nPORTAL_URL=http://192.168.1.1:3000\nREDIRECT_URL=http://google.com\n```\n\n## Integration Flow\n\n### 1. Customer Connection Process\n```\nDevice connects → DHCP assigns IP → DNS redirects to portal → \nCustomer enters voucher → System validates → Equipment authorizes → \nInternet access granted with limits\n```\n\n### 2. Backend Authorization Flow\n```\nVoucher validation → Database check → Network API call → \nPolicy application → Session tracking → Real-time monitoring\n```\n\n## API Endpoints\n\nThe system provides these network management endpoints:\n\n- `GET /api/network/config` - Get current configuration\n- `POST /api/network/config` - Update network settings\n- `POST /api/network/test-connection` - Test equipment connectivity\n- `GET /api/network/active-devices` - List connected devices\n- `POST /api/network/disconnect-device` - Force disconnect device\n\n## Monitoring and Management\n\n### Real-time Features\n- Active device monitoring\n- Bandwidth usage tracking\n- Session time enforcement\n- Data limit monitoring\n- Automatic disconnection when limits exceeded\n\n### Admin Dashboard\n- Live connection status\n- Equipment health monitoring\n- Session statistics\n- Error logging and alerts\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Connection Failed**\n   - Verify IP address and port\n   - Check firewall rules\n   - Confirm API is enabled on equipment\n\n2. **Authentication Failed**\n   - Verify username/password\n   - Check user permissions\n   - Confirm API access rights\n\n3. **Voucher Authorization Failed**\n   - Check RADIUS configuration\n   - Verify shared secret\n   - Test captive portal redirection\n\n### Debug Mode\n\nEnable detailed logging by setting:\n```bash\nNODE_ENV=development\nDEBUG_NETWORK=true\n```\n\n### Log Analysis\n\nMonitor these log messages:\n- `Network integration initialized` - System startup\n- `Attempting to redeem voucher` - Customer requests\n- `Network authorization result` - Equipment responses\n- `Device authorized` - Successful connections\n\n## Security Considerations\n\n1. **API Security**\n   - Use strong passwords\n   - Limit API access by IP\n   - Enable HTTPS where possible\n\n2. **Network Isolation**\n   - Separate guest and management networks\n   - Use VLANs for traffic segregation\n   - Implement proper firewall rules\n\n3. **Monitoring**\n   - Log all authentication attempts\n   - Monitor for unusual usage patterns\n   - Set up alerts for security events\n\n## Production Deployment\n\n### Recommended Architecture\n```\nInternet → Router/Firewall → Access Points → Voucher System\n                         → Management Network → Admin Interface\n```\n\n### Scalability Options\n- Multiple access points per voucher system\n- Load balancing for high traffic\n- Database clustering for reliability\n- Redundant internet connections\n\n## Support and Maintenance\n\n### Regular Tasks\n- Monitor equipment health\n- Update firmware regularly\n- Review security logs\n- Backup configuration\n- Test disaster recovery\n\n### Performance Optimization\n- Monitor bandwidth utilization\n- Adjust user limits based on usage\n- Optimize RADIUS response times\n- Balance load across access points\n\n## Next Steps\n\n1. **Testing Phase**\n   - Start with demo mode (no equipment required)\n   - Test voucher validation and session tracking\n   - Verify admin interface functionality\n\n2. **Equipment Integration**\n   - Connect to test equipment\n   - Configure basic hotspot functionality\n   - Test single device authorization\n\n3. **Production Rollout**\n   - Deploy to production network\n   - Configure monitoring and alerts\n   - Train staff on admin interface\n   - Implement backup procedures\n\nThe system is designed to work in demo mode initially, allowing you to test all functionality before connecting real equipment. This ensures a smooth transition from development to production deployment.","size_bytes":7294},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# WiFi Voucher Management System\n\n## Overview\n\nThis is a full-stack WiFi voucher management system built with React, Express.js, and TypeScript. The application provides a comprehensive admin dashboard for managing WiFi access vouchers, monitoring user sessions, and customizing captive portal experiences. It's designed for businesses that want to provide controlled WiFi access through a voucher-based system.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Charts**: Chart.js with React Chart.js 2 for data visualization\n- **Forms**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon serverless PostgreSQL\n- **Session Management**: Express sessions with PostgreSQL storage\n- **Real-time Communication**: WebSocket server for live updates\n- **API Design**: RESTful endpoints with TypeScript interfaces\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema changes\n- **Session Storage**: PostgreSQL-backed session store using connect-pg-simple\n\n## Key Components\n\n### Database Schema\n- **Users**: Admin user management with role-based access\n- **Voucher Plans**: Configurable voucher types with different limits and pricing\n- **Vouchers**: Individual voucher codes with status tracking\n- **User Sessions**: Active connection monitoring and analytics\n- **System Settings**: Global configuration management\n- **Portal Settings**: Customizable captive portal branding\n- **Analytics Data**: Usage statistics and reporting data\n\n### Frontend Modules\n- **Dashboard**: Real-time system overview with key metrics\n- **Voucher Management**: Create, view, and manage voucher codes\n- **Session Monitoring**: Track active user connections and usage\n- **Captive Portal**: Customizable WiFi login experience\n- **Analytics**: Data visualization and reporting\n- **Settings**: System configuration and preferences\n\n### Backend Services\n- **Voucher Service**: Handles voucher creation, validation, and redemption\n- **Session Management**: Tracks user connections and data usage\n- **Authentication**: Admin user authentication and session management\n- **Real-time Updates**: WebSocket broadcasting for live dashboard updates\n- **Storage Layer**: Abstracted database operations with type safety\n\n## Data Flow\n\n1. **Admin Authentication**: Users log in through the admin interface\n2. **Voucher Creation**: Admins create voucher batches based on predefined plans\n3. **User Access**: End users redeem vouchers through the captive portal\n4. **Session Tracking**: System monitors active connections and data usage\n5. **Real-time Updates**: Dashboard receives live updates via WebSocket\n6. **Analytics Collection**: Usage data is collected for reporting and insights\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL driver for serverless environments\n- **drizzle-orm**: Type-safe ORM for database operations\n- **@tanstack/react-query**: Server state management and caching\n- **@radix-ui/***: Accessible UI component primitives\n- **chart.js**: Data visualization library\n- **ws**: WebSocket implementation for real-time features\n\n### Development Dependencies\n- **tsx**: TypeScript execution for development\n- **esbuild**: Fast JavaScript bundler for production builds\n- **tailwindcss**: Utility-first CSS framework\n- **vite**: Frontend build tool and development server\n\n## Deployment Strategy\n\n### Development Environment\n- **Frontend**: Vite dev server with HMR and error overlay\n- **Backend**: tsx for TypeScript execution with auto-restart\n- **Database**: Neon serverless PostgreSQL instance\n- **Real-time**: WebSocket server integrated with Express\n\n### Production Build\n- **Frontend**: Vite builds optimized static assets to `dist/public`\n- **Backend**: esbuild bundles server code to `dist/index.js`\n- **Database**: Drizzle migrations applied to production database\n- **Deployment**: Single Node.js process serving both API and static files\n\n### Environment Configuration\n- **DATABASE_URL**: PostgreSQL connection string (required)\n- **NODE_ENV**: Environment mode (development/production)\n- **Session Configuration**: Secure session management with PostgreSQL storage\n\n## Changelog\n\n- July 02, 2025. Initial setup\n- July 02, 2025. Added authentication system with separate admin and customer interfaces:\n  * Created admin login page with demo authentication\n  * Separated customer portal as public interface\n  * Updated routing to support /admin paths for authenticated users\n  * Added logout functionality\n  * Seeded database with sample voucher plans and vouchers\n- July 02, 2025. Implemented comprehensive voucher validation system:\n  * Voucher codes are cross-checked against PostgreSQL database\n  * Access granted only for valid, active voucher codes\n  * Invalid/used/expired vouchers are properly rejected\n  * Test voucher codes created: WIFI-2024-TEST01/02/03, WIFI-2024-GUEST\n  * Real-time session tracking and WebSocket updates\n  * Comprehensive error handling and user feedback\n- July 04, 2025. Added complete network equipment integration framework:\n  * Network Integration Service for MikroTik, pfSense, and generic RADIUS equipment\n  * Admin interface for configuring network equipment connections\n  * Support for bandwidth limits, session timeouts, and data quotas\n  * Real-time device monitoring and session management\n  * Equipment-specific setup instructions and troubleshooting guides\n  * API endpoints for testing connections and managing active devices\n- July 11, 2025. Conducted comprehensive hardware components research:\n  * Analyzed existing system hardware compatibility with MikroTik RouterOS, pfSense, and RADIUS equipment\n  * Researched current market landscape for business WiFi access points and voucher systems\n  * Created detailed hardware compatibility matrix and deployment recommendations\n  * Documented cost analysis and scalability considerations for different business sizes\n  * Established hardware expansion roadmap with three phases of implementation\n  * Generated comprehensive research document covering technical specifications and integration options\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.","size_bytes":6787},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"docs/hardware-components-research.md":{"content":"# Hardware Components Research for WiFi Voucher Management System\n\n## Overview\nThis document provides comprehensive research on hardware components and compatibility for the WiFi voucher management system. The research covers currently supported equipment, recommended hardware configurations, and future expansion possibilities.\n\n## Currently Supported Hardware\n\n### MikroTik RouterOS Equipment\n**Currently Implemented**: Full integration with API support\n\n**Supported Models**:\n- **MikroTik hAP** (Entry Level: $50-80)\n  - RouterOS with built-in hotspot functionality\n  - API port 8728 for external management\n  - Suitable for 20-30 concurrent users\n  - Bridge mode captive portal support\n\n- **MikroTik RouterBoard** (Mid-Range: $100-300)\n  - Advanced RouterOS features\n  - Bridge interface hotspot configuration\n  - Bandwidth profile management\n  - Suitable for 50-100 concurrent users\n\n**Technical Integration**:\n- API-based device authorization/deauthorization\n- Bandwidth limiting and session timeouts\n- Real-time device monitoring\n- RADIUS authentication support\n\n### pfSense Firewall Systems\n**Currently Implemented**: API integration framework\n\n**Hardware Requirements**:\n- x86-based systems (minimum 2GB RAM, SSD recommended)\n- Netgate appliances ($300-3000+)\n- DIY builds with compatible network cards\n\n**Features**:\n- Advanced captive portal with voucher system\n- Multiple authentication methods\n- Custom splash pages\n- Enterprise-grade security features\n\n**Limitations**:\n- No captive portal support in bridge mode\n- Requires dedicated hardware\n- Higher complexity for simple deployments\n\n### Generic RADIUS Equipment\n**Currently Implemented**: RADIUS client support\n\n**Compatibility**:\n- Any RADIUS-compatible access point\n- Network equipment supporting 802.1X\n- External RADIUS server integration\n\n## Recommended Hardware Configurations\n\n### Small Business (1-50 Users)\n**Primary Option**: MikroTik hAP ac²\n- **Price**: ~$60-80\n- **Capacity**: 20-30 concurrent users\n- **Features**: Built-in hotspot, API management, bridge mode\n- **Network**: 192.168.100.0/24 client network\n- **Power**: 24V PoE or power adapter\n\n**Alternative**: TP-Link Omada EAP610\n- **Price**: ~$150-200\n- **Capacity**: 50+ concurrent users\n- **Features**: Native voucher system, cloud management\n- **Integration**: Compatible  novia generic RADIUS\n\n### Medium Business (50-200 Users)\n**Primary Option**: MikroTik RouterBoard RB4011\n- **Price**: ~$200-250\n- **Capacity**: 100+ concurrent users\n- **Features**: Advanced routing, multiple interfaces\n- **Scalability**: Supports multiple access points\n\n**Alternative**: Ubiquiti UniFi Setup\n- **Gateway**: UDM Pro ($380)\n- **Access Points**: UniFi 6 Pro ($180 each)\n- **Management**: UniFi Network Controller\n- **Integration**: RADIUS authentication support\n\n### Enterprise (200+ Users)\n**Primary Option**: MikroTik CCR Series\n- **Price**: $500-1500+\n- **Capacity**: Unlimited (hardware dependent)\n- **Features**: Carrier-grade performance\n- **Scalability**: Multi-site management\n\n**Alternative**: pfSense + Enterprise APs\n- **Firewall**: Netgate 4100 ($500-800)\n- **Access Points**: Cisco Meraki or Aruba\n- **Management**: Centralized enterprise platform\n\n## Network Architecture Components\n\n### Core Network Equipment\n1. **Router/Gateway**: Primary routing and internet connection\n2. **Access Points**: WiFi signal distribution\n3. **Switches**: Network infrastructure (if multiple APs)\n4. **Management Server**: Voucher system hosting\n\n### Network Segmentation\n- **Guest Network**: Isolated VLAN for voucher users\n- **Management Network**: Administrative access\n- **WAN Interface**: Internet connection\n- **DMZ**: Captive portal hosting (optional)\n\n### Physical Infrastructure\n- **Power**: PoE+ switches for access points\n- **Cabling**: Cat6 ethernet for AP connections\n- **Mounting**: Ceiling or wall mounts for APs\n- **UPS**: Backup power for core equipment\n\n## Hardware Expansion Roadmap\n\n### Phase 1: Current Implementation\n- ✅ MikroTik RouterOS integration\n- ✅ pfSense framework\n- ✅ Generic RADIUS support\n- ✅ Basic device monitoring\n\n### Phase 2: Enhanced Support\n- 🔄 UniFi Controller integration\n- 🔄 TP-Link Omada support\n- 🔄 Aruba InstantOn compatibility\n- 🔄 Advanced device analytics\n\n### Phase 3: Enterprise Features\n- 📋 Cisco Meraki integration\n- 📋 Multi-site management\n- 📋 Load balancing support\n- 📋 Advanced reporting\n\n## Technical Specifications\n\n### API Requirements\n- **MikroTik**: RouterOS API on port 8728\n- **pfSense**: REST API via HTTPS (port 443)\n- **RADIUS**: UDP ports 1812/1813\n- **Management**: HTTP/HTTPS web interface\n\n### Network Protocols\n- **Authentication**: RADIUS, local database\n- **Monitoring**: SNMP, API polling\n- **Management**: SSH, web interface, API\n- **Captive Portal**: HTTP redirect, DNS spoofing\n\n### Performance Metrics\n- **Throughput**: Varies by hardware (10Mbps to 10Gbps)\n- **Concurrent Users**: 20-500+ depending on model\n- **Session Tracking**: Real-time monitoring\n- **Bandwidth Control**: Per-user limits\n\n## Integration Considerations\n\n### Compatibility Matrix\n| Equipment Type | Voucher Support | API Integration | Monitoring | Bridge Mode |\n|---------------|----------------|-----------------|------------|-------------|\n| MikroTik RouterOS | ✅ Native | ✅ Full | ✅ Real-time | ✅ Yes |\n| pfSense | ✅ Native | ✅ Full | ✅ Real-time | ❌ No |\n| UniFi | ✅ Native | 🔄 Planned | 🔄 Planned | ✅ Yes |\n| TP-Link Omada | ✅ Native | 🔄 Planned | 🔄 Planned | ✅ Yes |\n| Generic RADIUS | ✅ External | ✅ Limited | ✅ Basic | ✅ Yes |\n\n### Deployment Scenarios\n1. **Single Location**: One router with integrated AP\n2. **Multi-AP**: Central router with multiple access points\n3. **Multi-Site**: Distributed locations with central management\n4. **Hybrid**: Mix of different equipment types\n\n## Cost Analysis\n\n### Initial Investment\n- **Small Business**: $100-300 (single device)\n- **Medium Business**: $500-1500 (multiple devices)\n- **Enterprise**: $2000-10000+ (full infrastructure)\n\n### Ongoing Costs\n- **Hardware Maintenance**: 5-10% annually\n- **Software Licensing**: Varies by platform\n- **Support Services**: Optional professional services\n- **Upgrades**: Periodic hardware refresh\n\n## Recommendations\n\n### For New Deployments\n1. **Start Small**: MikroTik hAP for proof of concept\n2. **Plan for Growth**: Consider scalability requirements\n3. **Network Design**: Proper VLAN segmentation\n4. **Backup Plans**: Redundancy for critical components\n\n### For Existing Networks\n1. **Assessment**: Evaluate current equipment compatibility\n2. **Integration**: Gradual rollout with existing infrastructure\n3. **Migration**: Planned transition to supported equipment\n4. **Training**: Staff education on new systems\n\n## Future Considerations\n\n### Emerging Technologies\n- **WiFi 6E/7**: Next-generation wireless standards\n- **Cloud Management**: Centralized multi-site control\n- **AI/ML**: Intelligent network optimization\n- **IoT Integration**: Device-specific policies\n\n### Security Enhancements\n- **WPA3**: Latest wireless security standards\n- **Zero Trust**: Network access control\n- **Threat Detection**: Real-time security monitoring\n- **Compliance**: Industry-specific requirements\n\n---\n\n*Last Updated: July 11, 2025*\n*Research conducted for WiFi Voucher Management System*","size_bytes":7322},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/network-integration.ts":{"content":"import { EventEmitter } from 'events';\nimport { storage } from './storage';\nimport type { Voucher, UserSession } from '@shared/schema';\n\n/**\n * Network Integration Service\n * Connects the voucher management system to actual network equipment\n * Supports MikroTik routers, pfSense, and RADIUS servers\n */\n\nexport interface NetworkConfig {\n  // Router/Gateway Configuration\n  routerType: 'mikrotik' | 'pfsense' | 'generic';\n  routerHost: string;\n  routerPort: number;\n  routerUsername: string;\n  routerPassword: string;\n  \n  // RADIUS Server Configuration\n  radiusHost: string;\n  radiusPort: number;\n  radiusSecret: string;\n  \n  // Network Settings\n  hotspotInterface: string;\n  clientNetwork: string; // e.g., \"192.168.1.0/24\"\n  dnsServers: string[];\n  \n  // Captive Portal Settings\n  portalUrl: string;\n  redirectUrl: string;\n}\n\nexport interface NetworkDevice {\n  macAddress: string;\n  ipAddress: string;\n  sessionId: string;\n  voucherId: number;\n  isOnline: boolean;\n  dataUsed: number;\n  sessionStart: Date;\n  lastActivity: Date;\n}\n\nexport interface BandwidthLimit {\n  downloadSpeed: number; // Kbps\n  uploadSpeed: number;   // Kbps\n  totalData: number;     // MB\n  sessionTime: number;   // minutes\n}\n\nexport class NetworkIntegration extends EventEmitter {\n  private config: NetworkConfig;\n  private activeDevices: Map<string, NetworkDevice> = new Map();\n  private monitoringInterval: NodeJS.Timeout | null = null;\n\n  constructor(config: NetworkConfig) {\n    super();\n    this.config = config;\n    this.startMonitoring();\n  }\n\n  /**\n   * Authorize a device for network access after voucher validation\n   */\n  async authorizeDevice(\n    voucher: Voucher,\n    deviceInfo: { macAddress: string; ipAddress: string; userAgent: string }\n  ): Promise<{ success: boolean; sessionId: string; message: string }> {\n    try {\n      console.log(`Authorizing device ${deviceInfo.macAddress} with voucher ${voucher.code}`);\n\n      // Get voucher plan details for bandwidth limits\n      const limits = await this.getVoucherLimits(voucher);\n      \n      // Create network session\n      const sessionId = this.generateSessionId();\n      \n      // Apply network policies based on router type\n      const authResult = await this.applyNetworkPolicies(deviceInfo, limits, sessionId);\n      \n      if (authResult.success) {\n        // Track device in active sessions\n        const device: NetworkDevice = {\n          macAddress: deviceInfo.macAddress,\n          ipAddress: deviceInfo.ipAddress,\n          sessionId,\n          voucherId: voucher.id,\n          isOnline: true,\n          dataUsed: 0,\n          sessionStart: new Date(),\n          lastActivity: new Date()\n        };\n        \n        this.activeDevices.set(deviceInfo.macAddress, device);\n        \n        // Emit event for real-time updates\n        this.emit('deviceAuthorized', device);\n        \n        return {\n          success: true,\n          sessionId,\n          message: 'Device authorized successfully'\n        };\n      } else {\n        return {\n          success: false,\n          sessionId: '',\n          message: authResult.message || 'Failed to authorize device'\n        };\n      }\n    } catch (error) {\n      console.error('Error authorizing device:', error);\n      return {\n        success: false,\n        sessionId: '',\n        message: 'Network authorization failed'\n      };\n    }\n  }\n\n  /**\n   * Remove device authorization and disconnect from network\n   */\n  async deauthorizeDevice(macAddress: string): Promise<boolean> {\n    try {\n      const device = this.activeDevices.get(macAddress);\n      if (!device) return false;\n\n      // Remove network policies\n      await this.removeNetworkPolicies(device);\n      \n      // Update device status\n      device.isOnline = false;\n      this.activeDevices.delete(macAddress);\n      \n      // Update session in database\n      await storage.endUserSession(device.voucherId);\n      \n      this.emit('deviceDeauthorized', device);\n      \n      return true;\n    } catch (error) {\n      console.error('Error deauthorizing device:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get bandwidth and time limits from voucher plan\n   */\n  private async getVoucherLimits(voucher: Voucher): Promise<BandwidthLimit> {\n    // In a real system, this would fetch from voucher plan\n    // For now, return default limits based on voucher type\n    return {\n      downloadSpeed: 10000, // 10 Mbps\n      uploadSpeed: 2000,    // 2 Mbps\n      totalData: 1000,      // 1 GB\n      sessionTime: 240      // 4 hours\n    };\n  }\n\n  /**\n   * Apply network policies based on router type\n   */\n  private async applyNetworkPolicies(\n    deviceInfo: { macAddress: string; ipAddress: string },\n    limits: BandwidthLimit,\n    sessionId: string\n  ): Promise<{ success: boolean; message?: string }> {\n    switch (this.config.routerType) {\n      case 'mikrotik':\n        return this.applyMikroTikPolicies(deviceInfo, limits, sessionId);\n      case 'pfsense':\n        return this.applyPfSensePolicies(deviceInfo, limits, sessionId);\n      default:\n        return this.applyGenericPolicies(deviceInfo, limits, sessionId);\n    }\n  }\n\n  /**\n   * Apply policies for MikroTik RouterOS\n   */\n  private async applyMikroTikPolicies(\n    deviceInfo: { macAddress: string; ipAddress: string },\n    limits: BandwidthLimit,\n    sessionId: string\n  ): Promise<{ success: boolean; message?: string }> {\n    try {\n      // MikroTik RouterOS API commands\n      const commands = [\n        // Add user to hotspot\n        `/ip/hotspot/user/add name=${deviceInfo.macAddress} password=\"\" profile=default`,\n        \n        // Set bandwidth limits\n        `/queue/simple/add name=queue-${sessionId} target=${deviceInfo.ipAddress} max-limit=${limits.uploadSpeed}k/${limits.downloadSpeed}k`,\n        \n        // Set session timeout\n        `/ip/hotspot/user/set [find name=${deviceInfo.macAddress}] limit-uptime=${limits.sessionTime}m`,\n        \n        // Set data limit\n        `/ip/hotspot/user/set [find name=${deviceInfo.macAddress}] limit-bytes-total=${limits.totalData}M`\n      ];\n\n      // Execute commands via RouterOS API\n      const result = await this.executeMikroTikCommands(commands);\n      \n      return {\n        success: result.success,\n        message: result.message\n      };\n    } catch (error) {\n      console.error('MikroTik policy application failed:', error);\n      return {\n        success: false,\n        message: 'Failed to apply MikroTik policies'\n      };\n    }\n  }\n\n  /**\n   * Apply policies for pfSense\n   */\n  private async applyPfSensePolicies(\n    deviceInfo: { macAddress: string; ipAddress: string },\n    limits: BandwidthLimit,\n    sessionId: string\n  ): Promise<{ success: boolean; message?: string }> {\n    try {\n      // pfSense uses vouchers and captive portal\n      const voucher = {\n        username: deviceInfo.macAddress,\n        bandwidth_up: limits.uploadSpeed,\n        bandwidth_down: limits.downloadSpeed,\n        session_timeout: limits.sessionTime * 60, // Convert to seconds\n        data_limit: limits.totalData * 1024 * 1024 // Convert to bytes\n      };\n\n      // Add voucher to pfSense captive portal\n      const result = await this.addPfSenseVoucher(voucher);\n      \n      return {\n        success: result.success,\n        message: result.message\n      };\n    } catch (error) {\n      console.error('pfSense policy application failed:', error);\n      return {\n        success: false,\n        message: 'Failed to apply pfSense policies'\n      };\n    }\n  }\n\n  /**\n   * Apply generic policies using RADIUS\n   */\n  private async applyGenericPolicies(\n    deviceInfo: { macAddress: string; ipAddress: string },\n    limits: BandwidthLimit,\n    sessionId: string\n  ): Promise<{ success: boolean; message?: string }> {\n    try {\n      // Generic RADIUS authentication\n      const radiusRequest = {\n        username: deviceInfo.macAddress,\n        password: sessionId,\n        attributes: {\n          'Framed-IP-Address': deviceInfo.ipAddress,\n          'Mikrotik-Rate-Limit': `${limits.uploadSpeed}k/${limits.downloadSpeed}k`,\n          'Session-Timeout': limits.sessionTime * 60,\n          'Octets-Limit': limits.totalData * 1024 * 1024\n        }\n      };\n\n      const result = await this.sendRadiusRequest(radiusRequest);\n      \n      return {\n        success: result.success,\n        message: result.message\n      };\n    } catch (error) {\n      console.error('Generic policy application failed:', error);\n      return {\n        success: false,\n        message: 'Failed to apply network policies'\n      };\n    }\n  }\n\n  /**\n   * Remove network policies when session ends\n   */\n  private async removeNetworkPolicies(device: NetworkDevice): Promise<boolean> {\n    try {\n      switch (this.config.routerType) {\n        case 'mikrotik':\n          return this.removeMikroTikPolicies(device);\n        case 'pfsense':\n          return this.removePfSensePolicies(device);\n        default:\n          return this.removeGenericPolicies(device);\n      }\n    } catch (error) {\n      console.error('Error removing network policies:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Remove MikroTik policies\n   */\n  private async removeMikroTikPolicies(device: NetworkDevice): Promise<boolean> {\n    const commands = [\n      `/ip/hotspot/user/remove [find name=${device.macAddress}]`,\n      `/queue/simple/remove [find name=queue-${device.sessionId}]`\n    ];\n\n    const result = await this.executeMikroTikCommands(commands);\n    return result.success;\n  }\n\n  /**\n   * Remove pfSense policies\n   */\n  private async removePfSensePolicies(device: NetworkDevice): Promise<boolean> {\n    // Implementation for pfSense voucher removal\n    return true;\n  }\n\n  /**\n   * Remove generic policies\n   */\n  private async removeGenericPolicies(device: NetworkDevice): Promise<boolean> {\n    // Send RADIUS disconnect request\n    const disconnectRequest = {\n      username: device.macAddress,\n      sessionId: device.sessionId\n    };\n\n    const result = await this.sendRadiusDisconnect(disconnectRequest);\n    return result.success;\n  }\n\n  /**\n   * Execute MikroTik RouterOS API commands\n   */\n  private async executeMikroTikCommands(commands: string[]): Promise<{ success: boolean; message: string }> {\n    // Implementation would use RouterOS API library\n    // For now, return mock success\n    console.log('Executing MikroTik commands:', commands);\n    return {\n      success: true,\n      message: 'Commands executed successfully'\n    };\n  }\n\n  /**\n   * Add voucher to pfSense captive portal\n   */\n  private async addPfSenseVoucher(voucher: any): Promise<{ success: boolean; message: string }> {\n    // Implementation would use pfSense API\n    console.log('Adding pfSense voucher:', voucher);\n    return {\n      success: true,\n      message: 'Voucher added successfully'\n    };\n  }\n\n  /**\n   * Send RADIUS authentication request\n   */\n  private async sendRadiusRequest(request: any): Promise<{ success: boolean; message: string }> {\n    // Implementation would use RADIUS client library\n    console.log('Sending RADIUS request:', request);\n    return {\n      success: true,\n      message: 'RADIUS authentication successful'\n    };\n  }\n\n  /**\n   * Send RADIUS disconnect request\n   */\n  private async sendRadiusDisconnect(request: any): Promise<{ success: boolean; message: string }> {\n    // Implementation would use RADIUS client library\n    console.log('Sending RADIUS disconnect:', request);\n    return {\n      success: true,\n      message: 'RADIUS disconnect successful'\n    };\n  }\n\n  /**\n   * Generate unique session ID\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Start monitoring active devices\n   */\n  private startMonitoring(): void {\n    this.monitoringInterval = setInterval(() => {\n      this.monitorActiveDevices();\n    }, 30000); // Check every 30 seconds\n  }\n\n  /**\n   * Monitor active devices and update usage stats\n   */\n  private async monitorActiveDevices(): Promise<void> {\n    for (const [macAddress, device] of this.activeDevices) {\n      try {\n        // Get current usage stats from network equipment\n        const stats = await this.getDeviceStats(device);\n        \n        if (stats) {\n          device.dataUsed = stats.dataUsed;\n          device.lastActivity = new Date();\n          \n          // Update database\n          await storage.updateSessionActivity(device.voucherId, device.dataUsed);\n          \n          // Check limits and disconnect if exceeded\n          await this.checkAndEnforceLimits(device);\n        }\n      } catch (error) {\n        console.error(`Error monitoring device ${macAddress}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Get device usage statistics from network equipment\n   */\n  private async getDeviceStats(device: NetworkDevice): Promise<{ dataUsed: number; isOnline: boolean } | null> {\n    // Implementation would query actual network equipment\n    // For now, return mock data\n    return {\n      dataUsed: device.dataUsed + Math.floor(Math.random() * 1000), // KB\n      isOnline: true\n    };\n  }\n\n  /**\n   * Check and enforce voucher limits\n   */\n  private async checkAndEnforceLimits(device: NetworkDevice): Promise<void> {\n    const limits = await this.getVoucherLimits({ id: device.voucherId } as Voucher);\n    const sessionDuration = (new Date().getTime() - device.sessionStart.getTime()) / 60000; // minutes\n    \n    // Check time limit\n    if (sessionDuration > limits.sessionTime) {\n      await this.deauthorizeDevice(device.macAddress);\n      console.log(`Device ${device.macAddress} disconnected: time limit exceeded`);\n      return;\n    }\n    \n    // Check data limit\n    if (device.dataUsed > limits.totalData * 1024) { // Convert MB to KB\n      await this.deauthorizeDevice(device.macAddress);\n      console.log(`Device ${device.macAddress} disconnected: data limit exceeded`);\n      return;\n    }\n  }\n\n  /**\n   * Get list of active devices\n   */\n  getActiveDevices(): NetworkDevice[] {\n    return Array.from(this.activeDevices.values());\n  }\n\n  /**\n   * Get device by MAC address\n   */\n  getDevice(macAddress: string): NetworkDevice | undefined {\n    return this.activeDevices.get(macAddress);\n  }\n\n  /**\n   * Stop monitoring and cleanup\n   */\n  stop(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n    this.activeDevices.clear();\n  }\n}\n\n// Export singleton instance\nexport let networkIntegration: NetworkIntegration | null = null;\n\nexport function initializeNetworkIntegration(config: NetworkConfig): NetworkIntegration {\n  if (networkIntegration) {\n    networkIntegration.stop();\n  }\n  \n  networkIntegration = new NetworkIntegration(config);\n  return networkIntegration;\n}\n\nexport function getNetworkIntegration(): NetworkIntegration | null {\n  return networkIntegration;\n}","size_bytes":14799},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { \n  insertVoucherSchema, \n  insertVoucherPlanSchema,\n  insertUserSessionSchema \n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { initializeNetworkIntegration, getNetworkIntegration } from \"./network-integration\";\nimport { getNetworkConfig } from \"./config/network-config\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize network integration\n  const networkConfig = getNetworkConfig(process.env.EQUIPMENT_TYPE);\n  const networkIntegration = initializeNetworkIntegration(networkConfig);\n  \n  console.log(`Network integration initialized for ${networkConfig.routerType} equipment`);\n  console.log(`Router: ${networkConfig.routerHost}:${networkConfig.routerPort}`);\n  console.log(`Client Network: ${networkConfig.clientNetwork}`);\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws) => {\n    console.log('Client connected to WebSocket');\n    \n    ws.on('close', () => {\n      console.log('Client disconnected from WebSocket');\n    });\n  });\n\n  // Broadcast function for real-time updates\n  const broadcast = (data: any) => {\n    wss.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(data));\n      }\n    });\n  };\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const voucherStats = await storage.getVoucherStats();\n      const sessionStats = await storage.getSessionStats();\n      \n      res.json({\n        activeVouchers: voucherStats.active,\n        connectedUsers: sessionStats.connected,\n        dataUsageToday: `${(sessionStats.totalDataToday / 1024).toFixed(1)} GB`,\n        revenueToday: \"$247\", // This would come from actual calculations\n        peakToday: sessionStats.peakToday,\n        avgDuration: `${(sessionStats.avgDuration / 60).toFixed(1)}h`,\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Voucher Plans\n  app.get(\"/api/voucher-plans\", async (req, res) => {\n    try {\n      const plans = await storage.getVoucherPlans();\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error fetching voucher plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch voucher plans\" });\n    }\n  });\n\n  app.post(\"/api/voucher-plans\", async (req, res) => {\n    try {\n      const planData = insertVoucherPlanSchema.parse(req.body);\n      const plan = await storage.createVoucherPlan(planData);\n      res.json(plan);\n    } catch (error) {\n      console.error(\"Error creating voucher plan:\", error);\n      res.status(500).json({ message: \"Failed to create voucher plan\" });\n    }\n  });\n\n  // Vouchers\n  app.get(\"/api/vouchers\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const offset = parseInt(req.query.offset as string) || 0;\n      const vouchers = await storage.getVouchers(limit, offset);\n      res.json(vouchers);\n    } catch (error) {\n      console.error(\"Error fetching vouchers:\", error);\n      res.status(500).json({ message: \"Failed to fetch vouchers\" });\n    }\n  });\n\n  app.post(\"/api/vouchers/generate\", async (req, res) => {\n    try {\n      const { planId, quantity, customSettings } = req.body;\n      const vouchersToCreate = [];\n\n      for (let i = 0; i < quantity; i++) {\n        const code = generateVoucherCode();\n        vouchersToCreate.push({\n          code,\n          planId,\n          status: \"active\" as const,\n          ...customSettings,\n        });\n      }\n\n      const vouchers = await storage.createVouchers(vouchersToCreate);\n      broadcast({ type: 'vouchers_created', count: quantity });\n      res.json(vouchers);\n    } catch (error) {\n      console.error(\"Error generating vouchers:\", error);\n      res.status(500).json({ message: \"Failed to generate vouchers\" });\n    }\n  });\n\n  // Voucher redemption (captive portal simulation)\n  app.post(\"/api/vouchers/redeem\", async (req, res) => {\n    try {\n      const { code, deviceInfo } = req.body;\n      \n      // Validate input\n      if (!code || !code.trim()) {\n        return res.status(400).json({ message: \"Voucher code is required\" });\n      }\n\n      // Clean up the voucher code (remove spaces, convert to uppercase)\n      const cleanCode = code.trim().toUpperCase();\n      console.log(`Attempting to redeem voucher: ${cleanCode}`);\n\n      // Find voucher in database\n      const voucher = await storage.getVoucherByCode(cleanCode);\n\n      if (!voucher) {\n        console.log(`Voucher not found: ${cleanCode}`);\n        return res.status(404).json({ \n          message: \"Invalid voucher code. Please check your code and try again.\" \n        });\n      }\n\n      console.log(`Found voucher: ${voucher.code}, status: ${voucher.status}`);\n\n      // Check if voucher is already used\n      if (voucher.status === \"used\") {\n        return res.status(400).json({ \n          message: \"This voucher has already been used.\" \n        });\n      }\n\n      // Check if voucher is expired\n      if (voucher.status === \"expired\") {\n        return res.status(400).json({ \n          message: \"This voucher has expired.\" \n        });\n      }\n\n      // Check if voucher is disabled\n      if (voucher.status === \"disabled\") {\n        return res.status(400).json({ \n          message: \"This voucher has been disabled.\" \n        });\n      }\n\n      // Check validity period\n      if (voucher.validUntil && new Date() > new Date(voucher.validUntil)) {\n        // Update status to expired\n        await storage.updateVoucherStatus(voucher.id, \"expired\");\n        return res.status(400).json({ \n          message: \"This voucher has expired.\" \n        });\n      }\n\n      console.log(`Voucher validation successful: ${cleanCode}`);\n\n      // Authorize device on network equipment\n      const networkIntegration = getNetworkIntegration();\n      let networkAuthResult = null;\n      \n      if (networkIntegration) {\n        try {\n          networkAuthResult = await networkIntegration.authorizeDevice(voucher, {\n            macAddress: deviceInfo?.macAddress || \"00:11:22:33:44:55\",\n            ipAddress: deviceInfo?.ipAddress || \"192.168.1.100\",\n            userAgent: deviceInfo?.userAgent || \"Unknown\"\n          });\n          \n          console.log(`Network authorization result:`, networkAuthResult);\n        } catch (error) {\n          console.error('Network authorization failed:', error);\n          // Continue with database-only mode for testing\n        }\n      }\n\n      // Only update voucher status if network authorization succeeded or we're in demo mode\n      if (!networkIntegration || (networkAuthResult && networkAuthResult.success)) {\n        // Update voucher status to used\n        await storage.updateVoucherStatus(voucher.id, \"used\", deviceInfo?.macAddress);\n\n        // Create user session in database\n        const session = await storage.createUserSession({\n          voucherId: voucher.id,\n          ipAddress: deviceInfo?.ipAddress || \"192.168.1.100\",\n          macAddress: deviceInfo?.macAddress || \"00:11:22:33:44:55\",\n          deviceType: deviceInfo?.deviceType || \"laptop\",\n          userAgent: deviceInfo?.userAgent || \"Unknown\",\n        });\n\n        console.log(`Voucher redeemed successfully: ${cleanCode}`);\n        \n        // Broadcast real-time update\n        broadcast({ \n          type: 'session_started', \n          session: {\n            ...session,\n            voucher: voucher,\n            networkSessionId: networkAuthResult?.sessionId\n          }\n        });\n\n        res.json({ \n          success: true, \n          session: session,\n          voucher: voucher,\n          networkSessionId: networkAuthResult?.sessionId,\n          message: networkIntegration \n            ? \"Voucher redeemed successfully! You are now connected to WiFi.\" \n            : \"Voucher redeemed successfully! (Demo mode - no network equipment connected)\"\n        });\n      } else {\n        return res.status(500).json({ \n          message: \"Failed to authorize device on network. Please try again.\" \n        });\n      }\n    } catch (error) {\n      console.error(\"Error redeeming voucher:\", error);\n      res.status(500).json({ message: \"Failed to redeem voucher. Please try again.\" });\n    }\n  });\n\n  // Active Sessions\n  app.get(\"/api/sessions/active\", async (req, res) => {\n    try {\n      const sessions = await storage.getActiveSessions();\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching active sessions:\", error);\n      res.status(500).json({ message: \"Failed to fetch active sessions\" });\n    }\n  });\n\n  app.post(\"/api/sessions/:id/disconnect\", async (req, res) => {\n    try {\n      const sessionId = parseInt(req.params.id);\n      const success = await storage.endUserSession(sessionId);\n      \n      if (success) {\n        broadcast({ type: 'session_ended', sessionId });\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ message: \"Session not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error disconnecting session:\", error);\n      res.status(500).json({ message: \"Failed to disconnect session\" });\n    }\n  });\n\n  // Portal Settings\n  app.get(\"/api/portal/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getPortalSettings();\n      res.json(settings || {\n        businessName: \"WiFi Hotspot\",\n        welcomeMessage: \"Welcome to our free WiFi! Enter your voucher code to get connected.\",\n        primaryColor: \"#3B82F6\",\n        termsRequired: true,\n      });\n    } catch (error) {\n      console.error(\"Error fetching portal settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch portal settings\" });\n    }\n  });\n\n  app.put(\"/api/portal/settings\", async (req, res) => {\n    try {\n      const settings = await storage.updatePortalSettings(req.body);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating portal settings:\", error);\n      res.status(500).json({ message: \"Failed to update portal settings\" });\n    }\n  });\n\n  // System Settings\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching system settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch system settings\" });\n    }\n  });\n\n  app.put(\"/api/settings/:key\", async (req, res) => {\n    try {\n      const { key } = req.params;\n      const { value } = req.body;\n      const setting = await storage.updateSystemSetting(key, value);\n      res.json(setting);\n    } catch (error) {\n      console.error(\"Error updating system setting:\", error);\n      res.status(500).json({ message: \"Failed to update system setting\" });\n    }\n  });\n\n  // Analytics\n  app.get(\"/api/analytics\", async (req, res) => {\n    try {\n      const startDate = new Date(req.query.startDate as string || Date.now() - 7 * 24 * 60 * 60 * 1000);\n      const endDate = new Date(req.query.endDate as string || Date.now());\n      \n      const analyticsData = await storage.getAnalyticsData(startDate, endDate);\n      res.json(analyticsData);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Network Configuration API\n  app.get(\"/api/network/config\", async (req, res) => {\n    try {\n      const networkIntegration = getNetworkIntegration();\n      const currentConfig = getNetworkConfig(process.env.EQUIPMENT_TYPE);\n      \n      res.json({\n        currentConfig: {\n          ...currentConfig,\n          routerPassword: '***', // Hide password in response\n        },\n        activeDevices: networkIntegration?.getActiveDevices() || [],\n        equipmentProfiles: [\n          'mikrotik_hap',\n          'mikrotik_routerboard', \n          'pfsense_standard',\n          'unifi_controller',\n          'openwrt_generic'\n        ]\n      });\n    } catch (error) {\n      console.error(\"Error fetching network config:\", error);\n      res.status(500).json({ message: \"Failed to fetch network configuration\" });\n    }\n  });\n\n  app.post(\"/api/network/config\", async (req, res) => {\n    try {\n      const { equipmentType, routerHost, routerPort, routerUsername, routerPassword, radiusSecret } = req.body;\n      \n      // Update environment variables\n      if (routerHost) process.env.ROUTER_HOST = routerHost;\n      if (routerPort) process.env.ROUTER_PORT = routerPort.toString();\n      if (routerUsername) process.env.ROUTER_USERNAME = routerUsername;\n      if (routerPassword) process.env.ROUTER_PASSWORD = routerPassword;\n      if (radiusSecret) process.env.RADIUS_SECRET = radiusSecret;\n      if (equipmentType) process.env.EQUIPMENT_TYPE = equipmentType;\n      \n      // Reinitialize network integration with new config\n      const newConfig = getNetworkConfig(equipmentType);\n      const networkIntegration = initializeNetworkIntegration(newConfig);\n      \n      console.log(`Network configuration updated for ${newConfig.routerType} equipment`);\n      \n      res.json({ \n        success: true, \n        message: \"Network configuration updated successfully\",\n        config: {\n          ...newConfig,\n          routerPassword: '***'\n        }\n      });\n    } catch (error) {\n      console.error(\"Error updating network config:\", error);\n      res.status(500).json({ message: \"Failed to update network configuration\" });\n    }\n  });\n\n  app.post(\"/api/network/test-connection\", async (req, res) => {\n    try {\n      const networkIntegration = getNetworkIntegration();\n      \n      if (!networkIntegration) {\n        return res.json({\n          success: false,\n          message: \"Network integration not initialized\"\n        });\n      }\n      \n      res.json({\n        success: true,\n        message: \"Network integration ready (demo mode)\"\n      });\n    } catch (error) {\n      console.error(\"Error testing network connection:\", error);\n      res.json({\n        success: false,\n        message: \"Connection test failed: \" + (error as Error).message\n      });\n    }\n  });\n\n  return httpServer;\n}\n\n// Helper function to generate unique voucher codes\nfunction generateVoucherCode(): string {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let result = \"WIFI-2024-\";\n  for (let i = 0; i < 6; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n","size_bytes":14743},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { voucherPlans, vouchers } from \"@shared/schema\";\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  try {\n    // Create sample voucher plans\n    const plans = await db.insert(voucherPlans).values([\n      {\n        name: \"Basic\",\n        duration: 60, // 1 hour\n        dataLimit: 500, // 500MB\n        speedLimitDown: 5,\n        speedLimitUp: 2,\n        maxDevices: 1,\n        price: \"2.99\",\n        isActive: true,\n      },\n      {\n        name: \"Standard\", \n        duration: 240, // 4 hours\n        dataLimit: 2048, // 2GB\n        speedLimitDown: 15,\n        speedLimitUp: 5,\n        maxDevices: 2,\n        price: \"7.99\",\n        isActive: true,\n      },\n      {\n        name: \"Premium\",\n        duration: 1440, // 24 hours\n        dataLimit: null, // Unlimited\n        speedLimitDown: 50,\n        speedLimitUp: 20,\n        maxDevices: 5,\n        price: \"19.99\",\n        isActive: true,\n      },\n      {\n        name: \"Guest Pass\",\n        duration: 30, // 30 minutes\n        dataLimit: 100, // 100MB\n        speedLimitDown: 2,\n        speedLimitUp: 1,\n        maxDevices: 1,\n        price: \"0.00\",\n        isActive: true,\n      }\n    ]).returning();\n\n    console.log(`Created ${plans.length} voucher plans`);\n\n    // Create some sample vouchers with known codes for testing\n    const sampleVouchers = [\n      // Test vouchers with known codes\n      { code: \"WIFI-2024-TEST01\", planId: plans[0].id, status: 'active' as const, validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) },\n      { code: \"WIFI-2024-TEST02\", planId: plans[1].id, status: 'active' as const, validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) },\n      { code: \"WIFI-2024-TEST03\", planId: plans[2].id, status: 'active' as const, validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) },\n      { code: \"WIFI-2024-GUEST\", planId: plans[3].id, status: 'active' as const, validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) },\n      { code: \"WIFI-2024-USED01\", planId: plans[0].id, status: 'used' as const, validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) },\n    ];\n\n    // Add some random vouchers\n    for (let i = 0; i < 15; i++) {\n      const planId = plans[Math.floor(Math.random() * plans.length)].id;\n      const code = `WIFI-2024-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;\n      \n      sampleVouchers.push({\n        code,\n        planId,\n        status: Math.random() > 0.7 ? 'used' : 'active' as const,\n        validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Valid for 7 days\n      });\n    }\n\n    const createdVouchers = await db.insert(vouchers).values(sampleVouchers).returning();\n    console.log(`Created ${createdVouchers.length} sample vouchers`);\n\n    console.log(\"Database seeded successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}\n\n// Run if called directly\nconst isMainModule = import.meta.url === `file://${process.argv[1]}`;\nif (isMainModule) {\n  seed().then(() => process.exit(0));\n}\n\nexport { seed };","size_bytes":3051},"server/storage.ts":{"content":"import {\n  users,\n  vouchers,\n  voucherPlans,\n  userSessions,\n  systemSettings,\n  portalSettings,\n  analyticsData,\n  type User,\n  type UpsertUser,\n  type Voucher,\n  type InsertVoucher,\n  type VoucherPlan,\n  type InsertVoucherPlan,\n  type UserSession,\n  type InsertUserSession,\n  type SystemSetting,\n  type InsertSystemSetting,\n  type PortalSetting,\n  type InsertPortalSetting,\n  type AnalyticsData,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Voucher plans\n  getVoucherPlans(): Promise<VoucherPlan[]>;\n  createVoucherPlan(plan: InsertVoucherPlan): Promise<VoucherPlan>;\n  updateVoucherPlan(id: number, plan: Partial<InsertVoucherPlan>): Promise<VoucherPlan | undefined>;\n  deleteVoucherPlan(id: number): Promise<boolean>;\n\n  // Vouchers\n  getVouchers(limit?: number, offset?: number): Promise<Voucher[]>;\n  getVoucherByCode(code: string): Promise<Voucher | undefined>;\n  createVouchers(vouchers: InsertVoucher[]): Promise<Voucher[]>;\n  updateVoucherStatus(id: number, status: string, usedBy?: string): Promise<Voucher | undefined>;\n  getVoucherStats(): Promise<{\n    total: number;\n    active: number;\n    used: number;\n    expired: number;\n  }>;\n\n  // User sessions\n  getActiveSessions(): Promise<UserSession[]>;\n  createUserSession(session: InsertUserSession): Promise<UserSession>;\n  endUserSession(id: number): Promise<boolean>;\n  updateSessionActivity(id: number, dataUsed: number): Promise<boolean>;\n  getSessionStats(): Promise<{\n    connected: number;\n    peakToday: number;\n    avgDuration: number;\n    totalDataToday: number;\n  }>;\n\n  // System settings\n  getSystemSettings(): Promise<SystemSetting[]>;\n  updateSystemSetting(key: string, value: string): Promise<SystemSetting>;\n\n  // Portal settings\n  getPortalSettings(): Promise<PortalSetting | undefined>;\n  updatePortalSettings(settings: Partial<InsertPortalSetting>): Promise<PortalSetting>;\n\n  // Analytics\n  getAnalyticsData(startDate: Date, endDate: Date): Promise<AnalyticsData[]>;\n  createAnalyticsEntry(data: Partial<AnalyticsData>): Promise<AnalyticsData>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Voucher plans\n  async getVoucherPlans(): Promise<VoucherPlan[]> {\n    return await db.select().from(voucherPlans).where(eq(voucherPlans.isActive, true));\n  }\n\n  async createVoucherPlan(plan: InsertVoucherPlan): Promise<VoucherPlan> {\n    const [newPlan] = await db.insert(voucherPlans).values(plan).returning();\n    return newPlan;\n  }\n\n  async updateVoucherPlan(id: number, plan: Partial<InsertVoucherPlan>): Promise<VoucherPlan | undefined> {\n    const [updated] = await db\n      .update(voucherPlans)\n      .set(plan)\n      .where(eq(voucherPlans.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteVoucherPlan(id: number): Promise<boolean> {\n    const result = await db\n      .update(voucherPlans)\n      .set({ isActive: false })\n      .where(eq(voucherPlans.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Vouchers\n  async getVouchers(limit = 50, offset = 0): Promise<Voucher[]> {\n    return await db\n      .select()\n      .from(vouchers)\n      .orderBy(desc(vouchers.createdAt))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async getVoucherByCode(code: string): Promise<Voucher | undefined> {\n    const [voucher] = await db.select().from(vouchers).where(eq(vouchers.code, code));\n    return voucher;\n  }\n\n  async createVouchers(voucherData: InsertVoucher[]): Promise<Voucher[]> {\n    return await db.insert(vouchers).values(voucherData).returning();\n  }\n\n  async updateVoucherStatus(id: number, status: string, usedBy?: string): Promise<Voucher | undefined> {\n    const updateData: any = { status };\n    if (status === \"used\") {\n      updateData.usedAt = new Date();\n      if (usedBy) updateData.usedBy = usedBy;\n    }\n    \n    const [updated] = await db\n      .update(vouchers)\n      .set(updateData)\n      .where(eq(vouchers.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getVoucherStats(): Promise<{\n    total: number;\n    active: number;\n    used: number;\n    expired: number;\n  }> {\n    const stats = await db\n      .select({\n        status: vouchers.status,\n        count: count(),\n      })\n      .from(vouchers)\n      .groupBy(vouchers.status);\n\n    const result = {\n      total: 0,\n      active: 0,\n      used: 0,\n      expired: 0,\n    };\n\n    stats.forEach((stat) => {\n      result.total += stat.count;\n      if (stat.status === \"active\") result.active = stat.count;\n      else if (stat.status === \"used\") result.used = stat.count;\n      else if (stat.status === \"expired\") result.expired = stat.count;\n    });\n\n    return result;\n  }\n\n  // User sessions\n  async getActiveSessions(): Promise<UserSession[]> {\n    return await db\n      .select()\n      .from(userSessions)\n      .where(eq(userSessions.isActive, true))\n      .orderBy(desc(userSessions.lastActivity));\n  }\n\n  async createUserSession(session: InsertUserSession): Promise<UserSession> {\n    const [newSession] = await db.insert(userSessions).values(session).returning();\n    return newSession;\n  }\n\n  async endUserSession(id: number): Promise<boolean> {\n    const result = await db\n      .update(userSessions)\n      .set({ \n        isActive: false, \n        endTime: new Date() \n      })\n      .where(eq(userSessions.id, id));\n    return result.rowCount > 0;\n  }\n\n  async updateSessionActivity(id: number, dataUsed: number): Promise<boolean> {\n    const result = await db\n      .update(userSessions)\n      .set({ \n        dataUsed,\n        lastActivity: new Date() \n      })\n      .where(eq(userSessions.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getSessionStats(): Promise<{\n    connected: number;\n    peakToday: number;\n    avgDuration: number;\n    totalDataToday: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const [connectedResult] = await db\n      .select({ count: count() })\n      .from(userSessions)\n      .where(eq(userSessions.isActive, true));\n\n    const [todayDataResult] = await db\n      .select({ \n        totalData: sql<number>`COALESCE(SUM(${userSessions.dataUsed}), 0)`,\n        avgDuration: sql<number>`COALESCE(AVG(EXTRACT(EPOCH FROM (COALESCE(${userSessions.endTime}, NOW()) - ${userSessions.startTime}))/60), 0)`\n      })\n      .from(userSessions)\n      .where(gte(userSessions.startTime, today));\n\n    return {\n      connected: connectedResult.count,\n      peakToday: 156, // This would need more complex query for actual peak\n      avgDuration: Math.round(todayDataResult.avgDuration || 0),\n      totalDataToday: todayDataResult.totalData || 0,\n    };\n  }\n\n  // System settings\n  async getSystemSettings(): Promise<SystemSetting[]> {\n    return await db.select().from(systemSettings);\n  }\n\n  async updateSystemSetting(key: string, value: string): Promise<SystemSetting> {\n    const [setting] = await db\n      .insert(systemSettings)\n      .values({ key, value })\n      .onConflictDoUpdate({\n        target: systemSettings.key,\n        set: { value, updatedAt: new Date() },\n      })\n      .returning();\n    return setting;\n  }\n\n  // Portal settings\n  async getPortalSettings(): Promise<PortalSetting | undefined> {\n    const [settings] = await db.select().from(portalSettings).limit(1);\n    return settings;\n  }\n\n  async updatePortalSettings(settings: Partial<InsertPortalSetting>): Promise<PortalSetting> {\n    // Check if settings exist\n    const existing = await this.getPortalSettings();\n    \n    if (existing) {\n      const [updated] = await db\n        .update(portalSettings)\n        .set({ ...settings, updatedAt: new Date() })\n        .where(eq(portalSettings.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(portalSettings)\n        .values(settings)\n        .returning();\n      return created;\n    }\n  }\n\n  // Analytics\n  async getAnalyticsData(startDate: Date, endDate: Date): Promise<AnalyticsData[]> {\n    return await db\n      .select()\n      .from(analyticsData)\n      .where(\n        and(\n          gte(analyticsData.date, startDate),\n          lte(analyticsData.date, endDate)\n        )\n      )\n      .orderBy(analyticsData.date);\n  }\n\n  async createAnalyticsEntry(data: Partial<AnalyticsData>): Promise<AnalyticsData> {\n    const [entry] = await db\n      .insert(analyticsData)\n      .values({ date: new Date(), ...data })\n      .returning();\n    return entry;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9122},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { \n  pgTable, \n  text, \n  serial, \n  integer, \n  boolean, \n  timestamp, \n  decimal,\n  varchar,\n  jsonb,\n  index\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table (required for auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table (admin users)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"admin\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Voucher types/plans\nexport const voucherPlans = pgTable(\"voucher_plans\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(), // Basic, Standard, Premium, Custom\n  duration: integer(\"duration\").notNull(), // in minutes\n  dataLimit: integer(\"data_limit\"), // in MB, null for unlimited\n  speedLimitDown: integer(\"speed_limit_down\"), // in Mbps\n  speedLimitUp: integer(\"speed_limit_up\"), // in Mbps\n  maxDevices: integer(\"max_devices\").default(1),\n  price: decimal(\"price\", { precision: 10, scale: 2 }),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Vouchers\nexport const vouchers = pgTable(\"vouchers\", {\n  id: serial(\"id\").primaryKey(),\n  code: varchar(\"code\").notNull().unique(),\n  planId: integer(\"plan_id\").references(() => voucherPlans.id),\n  status: varchar(\"status\").default(\"active\"), // active, used, expired, disabled\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  validUntil: timestamp(\"valid_until\"),\n  usedAt: timestamp(\"used_at\"),\n  usedBy: varchar(\"used_by\"), // MAC address or device identifier\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Active user sessions\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  voucherId: integer(\"voucher_id\").references(() => vouchers.id),\n  ipAddress: varchar(\"ip_address\").notNull(),\n  macAddress: varchar(\"mac_address\"),\n  deviceType: varchar(\"device_type\"), // mobile, laptop, tablet, desktop\n  userAgent: text(\"user_agent\"),\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  dataUsed: integer(\"data_used\").default(0), // in MB\n  isActive: boolean(\"is_active\").default(true),\n  lastActivity: timestamp(\"last_activity\").defaultNow(),\n});\n\n// System settings\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: serial(\"id\").primaryKey(),\n  key: varchar(\"key\").notNull().unique(),\n  value: text(\"value\"),\n  description: text(\"description\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Portal customization\nexport const portalSettings = pgTable(\"portal_settings\", {\n  id: serial(\"id\").primaryKey(),\n  businessName: varchar(\"business_name\"),\n  welcomeMessage: text(\"welcome_message\"),\n  primaryColor: varchar(\"primary_color\").default(\"#3B82F6\"),\n  logoUrl: varchar(\"logo_url\"),\n  termsRequired: boolean(\"terms_required\").default(true),\n  termsContent: text(\"terms_content\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Analytics data\nexport const analyticsData = pgTable(\"analytics_data\", {\n  id: serial(\"id\").primaryKey(),\n  date: timestamp(\"date\").notNull(),\n  totalSessions: integer(\"total_sessions\").default(0),\n  totalDataUsed: integer(\"total_data_used\").default(0), // in MB\n  totalRevenue: decimal(\"total_revenue\", { precision: 10, scale: 2 }).default(\"0\"),\n  avgSessionDuration: integer(\"avg_session_duration\").default(0), // in minutes\n  peakUsers: integer(\"peak_users\").default(0),\n  uniqueDevices: integer(\"unique_devices\").default(0),\n});\n\n// Relations\nexport const voucherPlansRelations = relations(voucherPlans, ({ many }) => ({\n  vouchers: many(vouchers),\n}));\n\nexport const vouchersRelations = relations(vouchers, ({ one, many }) => ({\n  plan: one(voucherPlans, {\n    fields: [vouchers.planId],\n    references: [voucherPlans.id],\n  }),\n  createdByUser: one(users, {\n    fields: [vouchers.createdBy],\n    references: [users.id],\n  }),\n  sessions: many(userSessions),\n}));\n\nexport const userSessionsRelations = relations(userSessions, ({ one }) => ({\n  voucher: one(vouchers, {\n    fields: [userSessions.voucherId],\n    references: [vouchers.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertVoucherPlanSchema = createInsertSchema(voucherPlans).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVoucherSchema = createInsertSchema(vouchers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  startTime: true,\n  lastActivity: true,\n});\n\nexport const insertSystemSettingSchema = createInsertSchema(systemSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertPortalSettingSchema = createInsertSchema(portalSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type VoucherPlan = typeof voucherPlans.$inferSelect;\nexport type InsertVoucherPlan = z.infer<typeof insertVoucherPlanSchema>;\nexport type Voucher = typeof vouchers.$inferSelect;\nexport type InsertVoucher = z.infer<typeof insertVoucherSchema>;\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\nexport type SystemSetting = typeof systemSettings.$inferSelect;\nexport type InsertSystemSetting = z.infer<typeof insertSystemSettingSchema>;\nexport type PortalSetting = typeof portalSettings.$inferSelect;\nexport type InsertPortalSetting = z.infer<typeof insertPortalSettingSchema>;\nexport type AnalyticsData = typeof analyticsData.$inferSelect;\n","size_bytes":6068},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Vouchers from \"@/pages/vouchers\";\nimport Sessions from \"@/pages/sessions\";\nimport Portal from \"@/pages/portal\";\nimport Analytics from \"@/pages/analytics\";\nimport Settings from \"@/pages/settings\";\nimport NetworkConfig from \"@/pages/network-config\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport CustomerPortal from \"@/pages/customer-portal\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useEffect, useState } from \"react\";\n\nfunction AdminRouter() {\n  return (\n    <Switch>\n      <Route path=\"/admin\" component={Dashboard} />\n      <Route path=\"/admin/vouchers\" component={Vouchers} />\n      <Route path=\"/admin/sessions\" component={Sessions} />\n      <Route path=\"/admin/network\" component={NetworkConfig} />\n      <Route path=\"/admin/portal\" component={Portal} />\n      <Route path=\"/admin/analytics\" component={Analytics} />\n      <Route path=\"/admin/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction PublicRouter({ onAdminLogin }: { onAdminLogin: (credentials: any) => void }) {\n  return (\n    <Switch>\n      <Route path=\"/\" component={CustomerPortal} />\n      <Route path=\"/admin/login\">\n        {() => <AdminLogin onLogin={onAdminLogin} />}\n      </Route>\n      <Route component={CustomerPortal} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [isAdminAuthenticated, setIsAdminAuthenticated] = useState(false);\n  const [currentPage, setCurrentPage] = useState(\"Dashboard Overview\");\n  const [currentPageSubtitle, setCurrentPageSubtitle] = useState(\"Monitor your WiFi voucher system performance\");\n  const { lastMessage } = useWebSocket('/ws');\n\n  // Check for saved admin session\n  useEffect(() => {\n    const savedAuth = localStorage.getItem('adminAuthenticated');\n    if (savedAuth === 'true') {\n      setIsAdminAuthenticated(true);\n    }\n  }, []);\n\n  // Handle admin login\n  const handleAdminLogin = (credentials: any) => {\n    setIsAdminAuthenticated(true);\n    localStorage.setItem('adminAuthenticated', 'true');\n    window.location.href = '/admin';\n  };\n\n  // Handle admin logout\n  const handleAdminLogout = () => {\n    setIsAdminAuthenticated(false);\n    localStorage.removeItem('adminAuthenticated');\n    window.location.href = '/admin/login';\n  };\n\n  // Handle real-time updates\n  useEffect(() => {\n    if (lastMessage) {\n      console.log('Received WebSocket message:', lastMessage);\n    }\n  }, [lastMessage]);\n\n  // Check current path to determine if we're in admin area\n  const currentPath = window.location.pathname;\n  const isAdminPath = currentPath.startsWith('/admin');\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        {isAdminPath ? (\n          // Admin area\n          <>\n            {currentPath === '/admin/login' ? (\n              <AdminLogin onLogin={handleAdminLogin} />\n            ) : isAdminAuthenticated ? (\n              <div className=\"flex h-screen bg-gray-50\">\n                <Sidebar onLogout={handleAdminLogout} />\n                <div className=\"flex-1 flex flex-col overflow-hidden\">\n                  <Header \n                    title={currentPage} \n                    subtitle={currentPageSubtitle}\n                    onPageChange={(title, subtitle) => {\n                      setCurrentPage(title);\n                      setCurrentPageSubtitle(subtitle);\n                    }} \n                  />\n                  <main className=\"flex-1 overflow-y-auto p-6\">\n                    <AdminRouter />\n                  </main>\n                </div>\n              </div>\n            ) : (\n              <AdminLogin onLogin={handleAdminLogin} />\n            )}\n          </>\n        ) : (\n          // Public customer portal\n          <PublicRouter onAdminLogin={handleAdminLogin} />\n        )}\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4310},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(43, 89%, 38%);\n  --error: hsl(0, 84.2%, 60.2%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(43, 89%, 38%);\n  --error: hsl(0, 62.8%, 30.6%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .success {\n    color: hsl(var(--success));\n  }\n  \n  .warning {\n    color: hsl(var(--warning));\n  }\n  \n  .error {\n    color: hsl(var(--error));\n  }\n  \n  .bg-success {\n    background-color: hsl(var(--success));\n  }\n  \n  .bg-warning {\n    background-color: hsl(var(--warning));\n  }\n  \n  .bg-error {\n    background-color: hsl(var(--error));\n  }\n}\n","size_bytes":2281},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/config/network-config.ts":{"content":"import type { NetworkConfig } from '../network-integration';\n\n/**\n * Network Configuration Management\n * Handles different network equipment configurations\n */\n\nexport const DEFAULT_NETWORK_CONFIG: NetworkConfig = {\n  // Router/Gateway Configuration\n  routerType: 'mikrotik',\n  routerHost: process.env.ROUTER_HOST || '192.168.1.1',\n  routerPort: parseInt(process.env.ROUTER_PORT || '8728'),\n  routerUsername: process.env.ROUTER_USERNAME || 'admin',\n  routerPassword: process.env.ROUTER_PASSWORD || '',\n  \n  // RADIUS Server Configuration\n  radiusHost: process.env.RADIUS_HOST || '127.0.0.1',\n  radiusPort: parseInt(process.env.RADIUS_PORT || '1812'),\n  radiusSecret: process.env.RADIUS_SECRET || 'testing123',\n  \n  // Network Settings\n  hotspotInterface: process.env.HOTSPOT_INTERFACE || 'wlan1',\n  clientNetwork: process.env.CLIENT_NETWORK || '192.168.100.0/24',\n  dnsServers: process.env.DNS_SERVERS?.split(',') || ['8.8.8.8', '8.8.4.4'],\n  \n  // Captive Portal Settings\n  portalUrl: process.env.PORTAL_URL || 'http://192.168.1.1:3000',\n  redirectUrl: process.env.REDIRECT_URL || 'http://google.com',\n};\n\n/**\n * Equipment-specific configurations\n */\nexport const EQUIPMENT_PROFILES = {\n  mikrotik_hap: {\n    routerType: 'mikrotik' as const,\n    routerPort: 8728,\n    hotspotInterface: 'wlan1',\n    clientNetwork: '192.168.100.0/24',\n  },\n  mikrotik_routerboard: {\n    routerType: 'mikrotik' as const,\n    routerPort: 8728,\n    hotspotInterface: 'bridge-hotspot',\n    clientNetwork: '192.168.100.0/24',\n  },\n  pfsense_standard: {\n    routerType: 'pfsense' as const,\n    routerPort: 443,\n    hotspotInterface: 'em1',\n    clientNetwork: '192.168.200.0/24',\n  },\n  unifi_controller: {\n    routerType: 'generic' as const,\n    routerPort: 8443,\n    hotspotInterface: 'eth0',\n    clientNetwork: '192.168.10.0/24',\n  },\n};\n\nexport function getNetworkConfig(equipmentType?: string): NetworkConfig {\n  const baseConfig = { ...DEFAULT_NETWORK_CONFIG };\n  \n  if (equipmentType && equipmentType in EQUIPMENT_PROFILES) {\n    const profile = EQUIPMENT_PROFILES[equipmentType as keyof typeof EQUIPMENT_PROFILES];\n    return { ...baseConfig, ...profile };\n  }\n  \n  return baseConfig;\n}","size_bytes":2170},"client/src/components/captive-portal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem } from \"@/components/ui/form\";\nimport { Wifi } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst redeemVoucherSchema = z.object({\n  code: z.string().min(1, \"Please enter a voucher code\"),\n  acceptTerms: z.boolean().refine((val) => val === true, \"You must accept the terms and conditions\"),\n});\n\ntype RedeemVoucherForm = z.infer<typeof redeemVoucherSchema>;\n\ninterface CaptivePortalProps {\n  businessName?: string;\n  welcomeMessage?: string;\n  primaryColor?: string;\n  termsRequired?: boolean;\n}\n\nexport default function CaptivePortal({\n  businessName = \"Coffee & Co.\",\n  welcomeMessage = \"Welcome to our free WiFi! Enter your voucher code to get connected.\",\n  primaryColor = \"#3B82F6\",\n  termsRequired = true,\n}: CaptivePortalProps) {\n  const { toast } = useToast();\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const form = useForm<RedeemVoucherForm>({\n    resolver: zodResolver(redeemVoucherSchema),\n    defaultValues: {\n      acceptTerms: false,\n    },\n  });\n\n  const redeemVoucherMutation = useMutation({\n    mutationFn: async (data: { code: string }) => {\n      const deviceInfo = {\n        ipAddress: \"192.168.1.100\", // This would be detected by the actual system\n        macAddress: \"00:11:22:33:44:55\",\n        deviceType: \"laptop\",\n        userAgent: navigator.userAgent,\n      };\n      \n      const response = await apiRequest(\"POST\", \"/api/vouchers/redeem\", {\n        code: data.code,\n        deviceInfo,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setIsConnecting(true);\n      setTimeout(() => {\n        toast({\n          title: \"Connected!\",\n          description: \"You are now connected to the WiFi network.\",\n        });\n        setIsConnecting(false);\n      }, 2000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RedeemVoucherForm) => {\n    redeemVoucherMutation.mutate({ code: data.code });\n  };\n\n  if (isConnecting) {\n    return (\n      <div className=\"max-w-sm mx-auto\">\n        <Card className=\"border border-gray-200 rounded-lg overflow-hidden\">\n          <div \n            className=\"h-32 bg-cover bg-center\"\n            style={{\n              backgroundImage: \"url('https://images.unsplash.com/photo-1554118811-1e0d58224f24?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=300')\"\n            }}\n          />\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"w-16 h-16 bg-primary bg-opacity-10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Wifi className=\"text-primary animate-pulse\" size={32} />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Connecting...</h3>\n            <p className=\"text-sm text-gray-600 mb-6\">Please wait while we connect you to the WiFi network.</p>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div className=\"bg-primary h-2 rounded-full animate-pulse\" style={{ width: '75%' }}></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-sm mx-auto\">\n      <Card className=\"border border-gray-200 rounded-lg overflow-hidden\">\n        <div \n          className=\"h-32 bg-cover bg-center\"\n          style={{\n            backgroundImage: \"url('https://images.unsplash.com/photo-1554118811-1e0d58224f24?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=300')\"\n          }}\n        />\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"w-16 h-16 bg-primary bg-opacity-10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Wifi className=\"text-primary\" size={32} />\n          </div>\n          <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{businessName}</h3>\n          <p className=\"text-sm text-gray-600 mb-6\">{welcomeMessage}</p>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"code\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter voucher code\"\n                        className=\"text-center font-mono text-lg\"\n                        {...field}\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                disabled={redeemVoucherMutation.isPending}\n                style={{ backgroundColor: primaryColor }}\n              >\n                {redeemVoucherMutation.isPending ? \"Connecting...\" : \"Connect to WiFi\"}\n              </Button>\n              \n              {termsRequired && (\n                <div className=\"pt-4 border-t border-gray-200\">\n                  <FormField\n                    control={form.control}\n                    name=\"acceptTerms\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <span className=\"text-xs text-gray-500\">\n                          I agree to the Terms & Conditions\n                        </span>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              )}\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6505},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport function useWebSocket(url: string) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const connect = () => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          setLastMessage(message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.current.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n        \n        // Attempt to reconnect after 3 seconds\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, 3000);\n      };\n\n      ws.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Error connecting to WebSocket:', error);\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [url]);\n\n  const sendMessage = (message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return { isConnected, lastMessage, sendMessage };\n}\n","size_bytes":1937},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatBytes(bytes: number, decimals = 2) {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function formatDuration(minutes: number) {\n  if (minutes < 60) {\n    return `${minutes}m`;\n  }\n  \n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  \n  if (hours < 24) {\n    return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;\n  }\n  \n  const days = Math.floor(hours / 24);\n  const remainingHours = hours % 24;\n  \n  return remainingHours > 0 ? `${days}d ${remainingHours}h` : `${days}d`;\n}\n\nexport function generateVoucherCode(): string {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let result = \"WIFI-2024-\";\n  for (let i = 0; i < 6; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\nexport function getDeviceIcon(deviceType: string) {\n  switch (deviceType?.toLowerCase()) {\n    case 'mobile':\n    case 'phone':\n      return 'fas fa-mobile-alt';\n    case 'laptop':\n      return 'fas fa-laptop';\n    case 'tablet':\n      return 'fas fa-tablet-alt';\n    case 'desktop':\n      return 'fas fa-desktop';\n    default:\n      return 'fas fa-device';\n  }\n}\n\nexport function getStatusColor(status: string) {\n  switch (status) {\n    case 'active':\n      return 'bg-green-100 text-green-800';\n    case 'used':\n      return 'bg-red-100 text-red-800';\n    case 'expired':\n      return 'bg-gray-100 text-gray-800';\n    default:\n      return 'bg-gray-100 text-gray-800';\n  }\n}\n\nexport function formatCurrency(amount: number) {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(amount);\n}\n","size_bytes":2053},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"@/components/ui/form\";\nimport { Shield, Wifi, Eye, EyeOff } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\ninterface AdminLoginProps {\n  onLogin: (credentials: LoginForm) => void;\n}\n\nexport default function AdminLogin({ onLogin }: AdminLoginProps) {\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    \n    // Simulate login process\n    try {\n      // For demo purposes, accept any username/password\n      // In production, this would validate against a real auth system\n      if (data.username && data.password) {\n        setTimeout(() => {\n          onLogin(data);\n          toast({\n            title: \"Login Successful\",\n            description: \"Welcome to the admin dashboard\",\n          });\n          setIsLoading(false);\n        }, 1000);\n      } else {\n        throw new Error(\"Invalid credentials\");\n      }\n    } catch (error) {\n      setIsLoading(false);\n      toast({\n        title: \"Login Failed\",\n        description: \"Please check your username and password\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"border-0 shadow-xl\">\n          <CardHeader className=\"text-center pb-8\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Shield className=\"text-white\" size={32} />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">Admin Login</CardTitle>\n            <p className=\"text-gray-600 mt-2\">Sign in to access the WiFi management system</p>\n          </CardHeader>\n          \n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <Label htmlFor=\"username\">Username</Label>\n                      <FormControl>\n                        <Input\n                          id=\"username\"\n                          placeholder=\"Enter your username\"\n                          className=\"h-12\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <Label htmlFor=\"password\">Password</Label>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            id=\"password\"\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Enter your password\"\n                            className=\"h-12 pr-12\"\n                            {...field}\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                          >\n                            {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}\n                          </button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full h-12 text-lg\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </Form>\n            \n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-500\">\n                Demo credentials: any username/password combination\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <div className=\"mt-6 text-center\">\n          <div className=\"flex items-center justify-center space-x-2 text-gray-600\">\n            <Wifi size={16} />\n            <span className=\"text-sm\">WiFi Voucher Management System</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5636},"client/src/pages/analytics.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Download, \n  Users, \n  TrendingUp, \n  Clock, \n  DollarSign \n} from \"lucide-react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar, Pie } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport default function Analytics() {\n  const [dateRange, setDateRange] = useState(\"7\");\n\n  useEffect(() => {\n    const event = new CustomEvent('pageChange', {\n      detail: {\n        title: 'Analytics & Reports',\n        subtitle: 'Detailed insights into your WiFi network usage'\n      }\n    });\n    window.dispatchEvent(event);\n  }, []);\n\n  const { data: analyticsData = [], isLoading } = useQuery({\n    queryKey: [\"/api/analytics\", dateRange],\n    queryFn: () => {\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - parseInt(dateRange));\n      \n      return fetch(`/api/analytics?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`)\n        .then(res => res.json());\n    },\n  });\n\n  const analyticsCards = [\n    {\n      title: \"Total Sessions\",\n      value: \"12,456\",\n      change: \"+23% vs last period\",\n      changeType: \"positive\" as const,\n      icon: Users,\n      color: \"text-primary\",\n    },\n    {\n      title: \"Data Consumed\",\n      value: \"847 GB\",\n      change: \"+12% vs last period\",\n      changeType: \"warning\" as const,\n      icon: TrendingUp,\n      color: \"text-green-600\",\n    },\n    {\n      title: \"Avg Session Time\",\n      value: \"1.8h\",\n      change: \"+5% vs last period\",\n      changeType: \"positive\" as const,\n      icon: Clock,\n      color: \"text-yellow-600\",\n    },\n    {\n      title: \"Revenue\",\n      value: \"$3,247\",\n      change: \"+18% vs last period\",\n      changeType: \"positive\" as const,\n      icon: DollarSign,\n      color: \"text-purple-600\",\n    },\n  ];\n\n  const trendsChartData = {\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    datasets: [\n      {\n        label: 'Sessions',\n        data: [120, 190, 300, 500, 200, 300, 450],\n        backgroundColor: 'rgb(59, 130, 246)',\n      },\n    ],\n  };\n\n  const devicesChartData = {\n    labels: ['Mobile', 'Laptop', 'Tablet', 'Desktop'],\n    datasets: [\n      {\n        data: [55, 25, 15, 5],\n        backgroundColor: [\n          'rgb(16, 185, 129)',\n          'rgb(245, 158, 11)',\n          'rgb(239, 68, 68)',\n          'rgb(99, 102, 241)',\n        ],\n      },\n    ],\n  };\n\n  const peakHoursData = Array.from({ length: 12 }, (_, i) => ({\n    hour: `${i + 9}${i + 9 < 12 ? 'AM' : 'PM'}`,\n    usage: Math.floor(Math.random() * 100) + 10,\n  }));\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n  };\n\n  const pieChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom' as const,\n      },\n    },\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">Analytics & Reports</h3>\n          <p className=\"text-sm text-gray-500\">Detailed insights into your WiFi network usage</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Select value={dateRange} onValueChange={setDateRange}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7\">Last 7 days</SelectItem>\n              <SelectItem value=\"30\">Last 30 days</SelectItem>\n              <SelectItem value=\"90\">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button className=\"flex items-center space-x-2\">\n            <Download size={16} />\n            <span>Export</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Analytics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {analyticsCards.map((card, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">{card.title}</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">{card.value}</p>\n                  <p className={`text-sm ${\n                    card.changeType === 'positive' ? 'text-green-600' : \n                    card.changeType === 'warning' ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {card.change}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 bg-opacity-10 rounded-lg flex items-center justify-center ${card.color.replace('text-', 'bg-')}`}>\n                  <card.icon className={card.color} size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Usage Trends</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <Bar options={chartOptions} data={trendsChartData} />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Device Types</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <Pie options={pieChartOptions} data={devicesChartData} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Peak Usage Hours */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Peak Usage Hours</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-12 gap-2\">\n            {peakHoursData.map((data, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"h-16 bg-gray-100 rounded mb-2 relative\">\n                  <div \n                    className=\"absolute bottom-0 left-0 right-0 bg-primary rounded\" \n                    style={{ height: `${data.usage}%` }}\n                  ></div>\n                </div>\n                <div className=\"text-xs text-gray-500\">{data.hour}</div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7495},"client/src/pages/customer-portal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem } from \"@/components/ui/form\";\nimport { Wifi, CheckCircle, Clock, Signal } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst redeemVoucherSchema = z.object({\n  code: z.string().min(1, \"Please enter a voucher code\"),\n  acceptTerms: z.boolean().refine((val) => val === true, \"You must accept the terms and conditions\"),\n});\n\ntype RedeemVoucherForm = z.infer<typeof redeemVoucherSchema>;\n\nexport default function CustomerPortal() {\n  const { toast } = useToast();\n  const [connectionStep, setConnectionStep] = useState<'input' | 'connecting' | 'connected'>('input');\n  const [connectionProgress, setConnectionProgress] = useState(0);\n\n  // Fetch portal settings for branding\n  const { data: portalSettings } = useQuery({\n    queryKey: [\"/api/portal/settings\"],\n  });\n\n  const form = useForm<RedeemVoucherForm>({\n    resolver: zodResolver(redeemVoucherSchema),\n    defaultValues: {\n      code: \"\",\n      acceptTerms: false,\n    },\n  });\n\n  const redeemVoucherMutation = useMutation({\n    mutationFn: async (data: { code: string }) => {\n      const deviceInfo = {\n        ipAddress: \"192.168.1.100\", // This would be detected by the actual system\n        macAddress: \"00:11:22:33:44:55\",\n        deviceType: \"laptop\",\n        userAgent: navigator.userAgent,\n      };\n      \n      const response = await apiRequest(\"POST\", \"/api/vouchers/redeem\", {\n        code: data.code,\n        deviceInfo,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setConnectionStep('connecting');\n      \n      // Simulate connection progress\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += Math.random() * 20 + 10;\n        setConnectionProgress(Math.min(progress, 100));\n        \n        if (progress >= 100) {\n          clearInterval(interval);\n          setTimeout(() => {\n            setConnectionStep('connected');\n            toast({\n              title: \"Connected Successfully!\",\n              description: \"You are now connected to the WiFi network.\",\n            });\n          }, 500);\n        }\n      }, 300);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Connection Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RedeemVoucherForm) => {\n    redeemVoucherMutation.mutate({ code: data.code });\n  };\n\n  const businessName = (portalSettings as any)?.businessName || \"Guest WiFi\";\n  const welcomeMessage = (portalSettings as any)?.welcomeMessage || \"Welcome! Enter your voucher code to connect to our WiFi network.\";\n  const primaryColor = (portalSettings as any)?.primaryColor || \"#3B82F6\";\n  const termsRequired = (portalSettings as any)?.termsRequired ?? true;\n\n  // Connection successful screen\n  if (connectionStep === 'connected') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md\">\n          <Card className=\"border-0 shadow-xl overflow-hidden\">\n            <div \n              className=\"h-32 bg-cover bg-center relative\"\n              style={{\n                backgroundImage: \"url('https://images.unsplash.com/photo-1557804506-669a67965ba0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=300')\"\n              }}\n            >\n              <div className=\"absolute inset-0 bg-green-600 bg-opacity-20\"></div>\n            </div>\n            \n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <CheckCircle className=\"text-green-600\" size={40} />\n              </div>\n              \n              <h2 className=\"text-2xl font-bold text-gray-900 mb-3\">Connected!</h2>\n              <p className=\"text-gray-600 mb-6\">\n                You are now connected to <strong>{businessName}</strong> WiFi network.\n              </p>\n              \n              <div className=\"bg-green-50 rounded-lg p-4 mb-6\">\n                <div className=\"flex items-center justify-between text-sm text-green-800\">\n                  <span>Network Status</span>\n                  <div className=\"flex items-center space-x-1\">\n                    <Signal className=\"text-green-600\" size={16} />\n                    <span className=\"font-medium\">Connected</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2 text-sm text-gray-500\">\n                <p>• Your session will remain active as per your voucher terms</p>\n                <p>• Please keep this window open to maintain connection</p>\n                <p>• Contact staff if you experience any issues</p>\n              </div>\n              \n              <Button \n                className=\"w-full mt-6\"\n                style={{ backgroundColor: primaryColor }}\n                onClick={() => window.open('https://www.google.com', '_blank')}\n              >\n                Start Browsing\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  // Connecting screen\n  if (connectionStep === 'connecting') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md\">\n          <Card className=\"border-0 shadow-xl overflow-hidden\">\n            <div \n              className=\"h-32 bg-cover bg-center relative\"\n              style={{\n                backgroundImage: \"url('https://images.unsplash.com/photo-1557804506-669a67965ba0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=300')\"\n              }}\n            >\n              <div className=\"absolute inset-0 bg-blue-600 bg-opacity-20\"></div>\n            </div>\n            \n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Wifi className=\"text-blue-600 animate-pulse\" size={40} />\n              </div>\n              \n              <h2 className=\"text-2xl font-bold text-gray-900 mb-3\">Connecting...</h2>\n              <p className=\"text-gray-600 mb-6\">\n                Please wait while we connect you to the WiFi network.\n              </p>\n              \n              <div className=\"w-full bg-gray-200 rounded-full h-3 mb-4\">\n                <div \n                  className=\"h-3 rounded-full transition-all duration-300\"\n                  style={{ \n                    width: `${connectionProgress}%`,\n                    backgroundColor: primaryColor \n                  }}\n                ></div>\n              </div>\n              \n              <p className=\"text-sm text-gray-500\">\n                {connectionProgress < 30 && \"Validating voucher...\"}\n                {connectionProgress >= 30 && connectionProgress < 60 && \"Authenticating device...\"}\n                {connectionProgress >= 60 && connectionProgress < 90 && \"Configuring network access...\"}\n                {connectionProgress >= 90 && \"Finalizing connection...\"}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  // Initial voucher input screen\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"border-0 shadow-xl overflow-hidden\">\n          <div \n            className=\"h-32 bg-cover bg-center relative\"\n            style={{\n              backgroundImage: \"url('https://images.unsplash.com/photo-1557804506-669a67965ba0?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=300')\"\n            }}\n          >\n            <div \n              className=\"absolute inset-0 bg-opacity-30\"\n              style={{ backgroundColor: primaryColor }}\n            ></div>\n          </div>\n          \n          <CardContent className=\"p-8 text-center\">\n            <div \n              className=\"w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6\"\n              style={{ backgroundColor: `${primaryColor}20` }}\n            >\n              <Wifi style={{ color: primaryColor }} size={40} />\n            </div>\n            \n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{businessName}</h2>\n            <p className=\"text-gray-600 mb-8\">{welcomeMessage}</p>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter voucher code (e.g., WIFI-2024-ABC123)\"\n                          className=\"text-center font-mono text-lg h-14 text-gray-900 placeholder-gray-400\"\n                          {...field}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full h-12 text-lg font-medium\"\n                  disabled={redeemVoucherMutation.isPending}\n                  style={{ backgroundColor: primaryColor }}\n                >\n                  {redeemVoucherMutation.isPending ? \"Connecting...\" : \"Connect to WiFi\"}\n                </Button>\n                \n                {termsRequired && (\n                  <div className=\"pt-4 border-t border-gray-200\">\n                    <FormField\n                      control={form.control}\n                      name=\"acceptTerms\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-start space-x-3\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              className=\"mt-1\"\n                            />\n                          </FormControl>\n                          <div className=\"text-left\">\n                            <span className=\"text-sm text-gray-600\">\n                              I agree to the{\" \"}\n                              <button \n                                type=\"button\" \n                                className=\"text-blue-600 hover:underline\"\n                                onClick={() => alert(\"Terms and Conditions content would be displayed here\")}\n                              >\n                                Terms & Conditions\n                              </button>\n                              {\" \"}and acceptable use policy\n                            </span>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                )}\n              </form>\n            </Form>\n            \n            <div className=\"mt-8 pt-6 border-t border-gray-200\">\n              <div className=\"text-center mb-4\">\n                <p className=\"text-xs text-gray-500 mb-2\">Test voucher codes:</p>\n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                  <code className=\"bg-gray-100 px-2 py-1 rounded text-gray-700\">WIFI-2024-TEST01</code>\n                  <code className=\"bg-gray-100 px-2 py-1 rounded text-gray-700\">WIFI-2024-TEST02</code>\n                  <code className=\"bg-gray-100 px-2 py-1 rounded text-gray-700\">WIFI-2024-TEST03</code>\n                  <code className=\"bg-gray-100 px-2 py-1 rounded text-gray-700\">WIFI-2024-GUEST</code>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-center space-x-4 text-sm text-gray-500\">\n                <div className=\"flex items-center space-x-1\">\n                  <Clock size={14} />\n                  <span>Time-based access</span>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Signal size={14} />\n                  <span>High-speed internet</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <div className=\"mt-6 text-center\">\n          <p className=\"text-sm text-gray-500\">\n            Need help? Contact our staff for assistance\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13244},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Ticket, \n  Users, \n  TrendingUp, \n  DollarSign,\n  UserPlus,\n  AlertTriangle\n} from \"lucide-react\";\nimport UsageChart from \"@/components/charts/usage-chart\";\nimport VoucherDistribution from \"@/components/charts/voucher-distribution\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Dashboard() {\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    // Update page title through parent component\n    const event = new CustomEvent('pageChange', {\n      detail: {\n        title: 'Dashboard Overview',\n        subtitle: 'Monitor your WiFi voucher system performance'\n      }\n    });\n    window.dispatchEvent(event);\n  }, []);\n\n  const { data: stats = {}, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: \"Active Vouchers\",\n      value: stats.activeVouchers || 0,\n      change: \"+12% from last month\",\n      changeType: \"positive\" as const,\n      icon: Ticket,\n      color: \"text-primary\",\n    },\n    {\n      title: \"Connected Users\",\n      value: stats.connectedUsers || 0,\n      change: \"+5 in last hour\",\n      changeType: \"positive\" as const,\n      icon: Users,\n      color: \"text-green-600\",\n    },\n    {\n      title: \"Data Usage Today\",\n      value: stats.dataUsageToday || \"0 GB\",\n      change: \"85% of limit\",\n      changeType: \"warning\" as const,\n      icon: TrendingUp,\n      color: \"text-yellow-600\",\n    },\n    {\n      title: \"Revenue Today\",\n      value: stats.revenueToday || \"$0\",\n      change: \"+18% vs yesterday\",\n      changeType: \"positive\" as const,\n      icon: DollarSign,\n      color: \"text-purple-600\",\n    },\n  ];\n\n  const recentActivities = [\n    {\n      type: \"user_connected\",\n      title: \"New user connected\",\n      description: \"Voucher: WIFI-2024-ABC123 • 2 minutes ago\",\n      icon: UserPlus,\n      iconColor: \"text-green-600 bg-green-100\",\n    },\n    {\n      type: \"voucher_created\",\n      title: \"Voucher batch created\",\n      description: \"50 Premium vouchers • 15 minutes ago\",\n      icon: Ticket,\n      iconColor: \"text-blue-600 bg-blue-100\",\n    },\n    {\n      type: \"limit_exceeded\",\n      title: \"Data limit exceeded\",\n      description: \"User disconnected • 32 minutes ago\",\n      icon: AlertTriangle,\n      iconColor: \"text-red-600 bg-red-100\",\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statCards.map((stat, index) => (\n          <Card key={index}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">{stat.title}</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">{stat.value}</p>\n                  <p className={`text-sm ${\n                    stat.changeType === 'positive' ? 'text-green-600' : \n                    stat.changeType === 'warning' ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {stat.change}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 bg-opacity-10 rounded-lg flex items-center justify-center ${stat.color.replace('text-', 'bg-')}`}>\n                  <stat.icon className={stat.color} size={24} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Charts Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Network Usage (24h)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <UsageChart />\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Voucher Types Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <VoucherDistribution />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Recent Activity</CardTitle>\n          <button \n            className=\"text-primary text-sm font-medium hover:text-primary/80\"\n            onClick={() => navigate('/sessions')}\n          >\n            View All\n          </button>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {recentActivities.map((activity, index) => (\n              <div \n                key={index} \n                className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50\"\n              >\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${activity.iconColor}`}>\n                  <activity.icon size={14} />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">{activity.title}</p>\n                  <p className=\"text-xs text-gray-500\">{activity.description}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5846},"client/src/pages/network-config.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Form, \n  FormControl, \n  FormDescription, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Wifi, \n  Router, \n  Settings, \n  CheckCircle, \n  XCircle, \n  AlertTriangle,\n  Network,\n  Shield,\n  Monitor\n} from \"lucide-react\";\n\nconst networkConfigSchema = z.object({\n  equipmentType: z.string().min(1, \"Equipment type is required\"),\n  routerHost: z.string().min(1, \"Router host is required\"),\n  routerPort: z.number().min(1).max(65535, \"Port must be between 1 and 65535\"),\n  routerUsername: z.string().min(1, \"Username is required\"),\n  routerPassword: z.string().min(1, \"Password is required\"),\n  radiusSecret: z.string().min(1, \"RADIUS secret is required\"),\n});\n\ntype NetworkConfigForm = z.infer<typeof networkConfigSchema>;\n\nexport default function NetworkConfig() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [connectionStatus, setConnectionStatus] = useState<'unknown' | 'testing' | 'success' | 'failed'>('unknown');\n\n  useEffect(() => {\n    const event = new CustomEvent('pageChange', {\n      detail: {\n        title: 'Network Equipment',\n        subtitle: 'Connect and configure your WiFi hardware'\n      }\n    });\n    window.dispatchEvent(event);\n  }, []);\n\n  const { data: networkData, isLoading } = useQuery({\n    queryKey: [\"/api/network/config\"],\n  });\n\n  const form = useForm<NetworkConfigForm>({\n    resolver: zodResolver(networkConfigSchema),\n    defaultValues: {\n      equipmentType: \"mikrotik_hap\",\n      routerHost: \"192.168.1.1\",\n      routerPort: 8728,\n      routerUsername: \"admin\",\n      routerPassword: \"\",\n      radiusSecret: \"testing123\",\n    },\n  });\n\n  // Update form when data loads\n  useEffect(() => {\n    if (networkData?.currentConfig) {\n      const config = networkData.currentConfig;\n      form.reset({\n        equipmentType: config.routerType === 'mikrotik' ? 'mikrotik_hap' : \n                     config.routerType === 'pfsense' ? 'pfsense_standard' : 'generic',\n        routerHost: config.routerHost,\n        routerPort: config.routerPort,\n        routerUsername: config.routerUsername,\n        routerPassword: \"\", // Don't populate password\n        radiusSecret: \"\", // Don't populate secret\n      });\n    }\n  }, [networkData, form]);\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (data: NetworkConfigForm) => {\n      const response = await apiRequest(\"POST\", \"/api/network/config\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Configuration Updated\",\n        description: \"Network equipment configuration has been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/network/config\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Configuration Failed\",\n        description: \"Failed to update network configuration. Please check your settings.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testConnectionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/network/test-connection\", {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setConnectionStatus(data.success ? 'success' : 'failed');\n      toast({\n        title: data.success ? \"Connection Successful\" : \"Connection Failed\",\n        description: data.message,\n        variant: data.success ? \"default\" : \"destructive\",\n      });\n    },\n    onError: () => {\n      setConnectionStatus('failed');\n      toast({\n        title: \"Connection Test Failed\",\n        description: \"Unable to test connection to network equipment.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: NetworkConfigForm) => {\n    updateConfigMutation.mutate(data);\n  };\n\n  const testConnection = () => {\n    setConnectionStatus('testing');\n    testConnectionMutation.mutate();\n  };\n\n  const getEquipmentInstructions = (type: string) => {\n    const instructions: Record<string, string[]> = {\n      mikrotik_hap: [\n        \"1. Connect to MikroTik router via Winbox or web interface\",\n        \"2. Navigate to IP → Services → API\",\n        \"3. Enable API service on port 8728\",\n        \"4. Create hotspot on wireless interface\",\n        \"5. Configure DNS redirection for captive portal\",\n        \"6. Test API connectivity from this system\"\n      ],\n      mikrotik_routerboard: [\n        \"1. Access RouterOS via SSH or Winbox\",\n        \"2. Configure bridge interface for hotspot\",\n        \"3. Set up hotspot server on bridge\",\n        \"4. Enable API service and configure users\",\n        \"5. Set bandwidth profiles for voucher types\",\n        \"6. Configure captive portal redirection\"\n      ],\n      pfsense_standard: [\n        \"1. Access pfSense web interface\",\n        \"2. Navigate to Services → Captive Portal\",\n        \"3. Enable captive portal on appropriate interface\",\n        \"4. Configure voucher authentication\",\n        \"5. Set up API credentials for remote management\",\n        \"6. Test portal functionality\"\n      ],\n      unifi_controller: [\n        \"1. Access UniFi Controller interface\",\n        \"2. Configure guest network with portal\",\n        \"3. Set up RADIUS authentication\",\n        \"4. Create bandwidth profiles\",\n        \"5. Enable API access\",\n        \"6. Test integration\"\n      ],\n    };\n    \n    return instructions[type] || [\"Configure your equipment according to manufacturer guidelines\"];\n  };\n\n  if (isLoading) {\n    return <div>Loading network configuration...</div>;\n  }\n\n  const currentConfig = networkData?.currentConfig;\n  const activeDevices = networkData?.activeDevices || [];\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs defaultValue=\"config\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"config\" className=\"flex items-center gap-2\">\n            <Settings size={16} />\n            Configuration\n          </TabsTrigger>\n          <TabsTrigger value=\"status\" className=\"flex items-center gap-2\">\n            <Monitor size={16} />\n            Status\n          </TabsTrigger>\n          <TabsTrigger value=\"setup\" className=\"flex items-center gap-2\">\n            <Router size={16} />\n            Setup Guide\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"config\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Network size={20} />\n                Network Equipment Configuration\n              </CardTitle>\n              <CardDescription>\n                Configure connection to your WiFi router or access point\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"equipmentType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Equipment Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select your equipment type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"mikrotik_hap\">MikroTik hAP (RouterOS)</SelectItem>\n                            <SelectItem value=\"mikrotik_routerboard\">MikroTik RouterBoard</SelectItem>\n                            <SelectItem value=\"pfsense_standard\">pfSense Firewall</SelectItem>\n                            <SelectItem value=\"unifi_controller\">UniFi Controller</SelectItem>\n                            <SelectItem value=\"openwrt_generic\">OpenWRT Generic</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormDescription>\n                          Choose the type of network equipment you're using\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"routerHost\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Router IP Address</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"192.168.1.1\" {...field} />\n                          </FormControl>\n                          <FormDescription>\n                            IP address of your router/access point\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"routerPort\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>API Port</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"8728\" \n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            API port (8728 for MikroTik, 443 for pfSense)\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"routerUsername\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"admin\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"routerPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Enter password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"radiusSecret\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>RADIUS Secret</FormLabel>\n                        <FormControl>\n                          <Input type=\"password\" placeholder=\"testing123\" {...field} />\n                        </FormControl>\n                        <FormDescription>\n                          Shared secret for RADIUS authentication\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-4\">\n                    <Button \n                      type=\"submit\" \n                      disabled={updateConfigMutation.isPending}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Shield size={16} />\n                      {updateConfigMutation.isPending ? \"Saving...\" : \"Save Configuration\"}\n                    </Button>\n\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      onClick={testConnection}\n                      disabled={testConnectionMutation.isPending || connectionStatus === 'testing'}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Wifi size={16} />\n                      {connectionStatus === 'testing' ? \"Testing...\" : \"Test Connection\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"status\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Monitor size={20} />\n                Network Status\n              </CardTitle>\n              <CardDescription>\n                Current network equipment connection status\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium\">Connection Status</h3>\n                  <p className=\"text-sm text-gray-500\">Status of network equipment connection</p>\n                </div>\n                <Badge \n                  variant={\n                    connectionStatus === 'success' ? 'default' :\n                    connectionStatus === 'failed' ? 'destructive' :\n                    connectionStatus === 'testing' ? 'secondary' : 'outline'\n                  }\n                  className=\"flex items-center gap-1\"\n                >\n                  {connectionStatus === 'success' && <CheckCircle size={14} />}\n                  {connectionStatus === 'failed' && <XCircle size={14} />}\n                  {connectionStatus === 'testing' && <AlertTriangle size={14} />}\n                  {connectionStatus === 'success' ? 'Connected' :\n                   connectionStatus === 'failed' ? 'Disconnected' :\n                   connectionStatus === 'testing' ? 'Testing' : 'Unknown'}\n                </Badge>\n              </div>\n\n              <Separator />\n\n              <div>\n                <h3 className=\"font-medium mb-2\">Current Configuration</h3>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-500\">Equipment Type:</span>\n                    <p className=\"font-medium\">{currentConfig?.routerType || 'Not configured'}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Router Host:</span>\n                    <p className=\"font-medium\">{currentConfig?.routerHost || 'Not configured'}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">API Port:</span>\n                    <p className=\"font-medium\">{currentConfig?.routerPort || 'Not configured'}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Client Network:</span>\n                    <p className=\"font-medium\">{currentConfig?.clientNetwork || 'Not configured'}</p>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div>\n                <h3 className=\"font-medium mb-2\">Active Devices</h3>\n                {activeDevices.length > 0 ? (\n                  <div className=\"space-y-2\">\n                    {activeDevices.map((device: any, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 border rounded\">\n                        <div>\n                          <p className=\"font-medium\">{device.macAddress}</p>\n                          <p className=\"text-sm text-gray-500\">{device.ipAddress}</p>\n                        </div>\n                        <Badge variant=\"outline\">{device.deviceType}</Badge>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-gray-500\">No active devices connected via network equipment</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"setup\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Router size={20} />\n                Setup Instructions\n              </CardTitle>\n              <CardDescription>\n                Step-by-step guide to configure your network equipment\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Alert className=\"mb-6\">\n                <AlertTriangle size={16} />\n                <AlertDescription>\n                  <strong>Important:</strong> These instructions are for connecting real network equipment. \n                  The system currently works in demo mode without equipment connected.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-medium mb-3\">For {form.watch('equipmentType')} Equipment:</h3>\n                  <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                    {getEquipmentInstructions(form.watch('equipmentType')).map((step, index) => (\n                      <li key={index} className=\"text-gray-700\">{step}</li>\n                    ))}\n                  </ol>\n                </div>\n\n                <Separator />\n\n                <div>\n                  <h3 className=\"font-medium mb-3\">Network Architecture Overview:</h3>\n                  <div className=\"bg-gray-50 p-4 rounded-lg text-sm space-y-2\">\n                    <p><strong>1. Captive Portal:</strong> Redirects new users to voucher entry page</p>\n                    <p><strong>2. Voucher Validation:</strong> System checks voucher against database</p>\n                    <p><strong>3. Network Authorization:</strong> Equipment grants/denies access based on voucher</p>\n                    <p><strong>4. Bandwidth Control:</strong> Limits applied based on voucher plan</p>\n                    <p><strong>5. Session Monitoring:</strong> Real-time tracking of usage and limits</p>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div>\n                  <h3 className=\"font-medium mb-3\">Required Network Protocols:</h3>\n                  <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                    <li><strong>RADIUS:</strong> Authentication, Authorization, and Accounting</li>\n                    <li><strong>DNS Redirection:</strong> Captures initial web requests</li>\n                    <li><strong>HTTP/HTTPS Interception:</strong> Redirects to captive portal</li>\n                    <li><strong>Bandwidth Shaping:</strong> Enforces speed and data limits</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":20509},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/portal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Save, Smartphone } from \"lucide-react\";\nimport CaptivePortal from \"@/components/captive-portal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst portalSettingsSchema = z.object({\n  businessName: z.string().min(1, \"Business name is required\"),\n  welcomeMessage: z.string().min(1, \"Welcome message is required\"),\n  primaryColor: z.string().min(7, \"Please select a color\"),\n  termsRequired: z.boolean(),\n  termsContent: z.string().optional(),\n});\n\ntype PortalSettingsForm = z.infer<typeof portalSettingsSchema>;\n\nexport default function Portal() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const event = new CustomEvent('pageChange', {\n      detail: {\n        title: 'Captive Portal',\n        subtitle: 'Customize your branded WiFi login experience'\n      }\n    });\n    window.dispatchEvent(event);\n  }, []);\n\n  const { data: portalSettings, isLoading } = useQuery({\n    queryKey: [\"/api/portal/settings\"],\n  });\n\n  const form = useForm<PortalSettingsForm>({\n    resolver: zodResolver(portalSettingsSchema),\n    defaultValues: {\n      businessName: \"Coffee & Co.\",\n      welcomeMessage: \"Welcome to our free WiFi! Enter your voucher code to get connected.\",\n      primaryColor: \"#3B82F6\",\n      termsRequired: true,\n      termsContent: \"\",\n    },\n  });\n\n  // Update form when data loads\n  useEffect(() => {\n    if (portalSettings) {\n      form.reset({\n        businessName: portalSettings.businessName || \"Coffee & Co.\",\n        welcomeMessage: portalSettings.welcomeMessage || \"Welcome to our free WiFi! Enter your voucher code to get connected.\",\n        primaryColor: portalSettings.primaryColor || \"#3B82F6\",\n        termsRequired: portalSettings.termsRequired ?? true,\n        termsContent: portalSettings.termsContent || \"\",\n      });\n    }\n  }, [portalSettings, form]);\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: PortalSettingsForm) => {\n      await apiRequest(\"PUT\", \"/api/portal/settings\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Portal settings updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/portal/settings\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PortalSettingsForm) => {\n    updateSettingsMutation.mutate(data);\n  };\n\n  // Watch form values for live preview\n  const watchedValues = form.watch();\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {[...Array(2)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-96 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">Captive Portal</h3>\n          <p className=\"text-sm text-gray-500\">Customize your branded WiFi login experience</p>\n        </div>\n        <Button \n          onClick={form.handleSubmit(onSubmit)}\n          disabled={updateSettingsMutation.isPending}\n          className=\"flex items-center space-x-2\"\n        >\n          <Save size={16} />\n          <span>{updateSettingsMutation.isPending ? \"Saving...\" : \"Save Changes\"}</span>\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Portal Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Portal Settings</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"businessName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Business Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"welcomeMessage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Welcome Message</FormLabel>\n                      <FormControl>\n                        <Textarea rows={3} {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"primaryColor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Primary Color</FormLabel>\n                      <div className=\"flex items-center space-x-3\">\n                        <FormControl>\n                          <input\n                            type=\"color\"\n                            {...field}\n                            className=\"w-12 h-10 border border-gray-300 rounded cursor-pointer\"\n                          />\n                        </FormControl>\n                        <FormControl>\n                          <Input {...field} className=\"flex-1\" />\n                        </FormControl>\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <div className=\"text-gray-400 text-2xl mb-2\">☁️</div>\n                  <p className=\"text-sm text-gray-500 mb-1\">Click to upload or drag and drop</p>\n                  <p className=\"text-xs text-gray-400\">PNG, JPG up to 2MB</p>\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"termsRequired\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <FormLabel>Terms & Conditions Required</FormLabel>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                {watchedValues.termsRequired && (\n                  <FormField\n                    control={form.control}\n                    name=\"termsContent\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Terms & Conditions Content</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            rows={4} \n                            placeholder=\"Enter your terms and conditions...\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Portal Preview */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Live Preview</CardTitle>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n              <Smartphone size={16} />\n              <span>Mobile View</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex justify-center\">\n              <CaptivePortal\n                businessName={watchedValues.businessName}\n                welcomeMessage={watchedValues.welcomeMessage}\n                primaryColor={watchedValues.primaryColor}\n                termsRequired={watchedValues.termsRequired}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9316},"client/src/pages/sessions.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  RefreshCw, \n  Activity, \n  Gauge, \n  TrendingUp, \n  Clock,\n  Smartphone,\n  Laptop,\n  Tablet,\n  Monitor\n} from \"lucide-react\";\nimport { formatBytes, getDeviceIcon } from \"@/lib/utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Sessions() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const event = new CustomEvent('pageChange', {\n      detail: {\n        title: 'Active Sessions',\n        subtitle: 'Monitor connected users and their network usage'\n      }\n    });\n    window.dispatchEvent(event);\n  }, []);\n\n  const { data: sessions = [], isLoading, refetch } = useQuery({\n    queryKey: [\"/api/sessions/active\"],\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  const { data: sessionStats = {} } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    refetchInterval: 30000,\n  });\n\n  const disconnectMutation = useMutation({\n    mutationFn: async (sessionId: number) => {\n      await apiRequest(\"POST\", `/api/sessions/${sessionId}/disconnect`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User disconnected successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions/active\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getDeviceIconComponent = (deviceType: string) => {\n    switch (deviceType?.toLowerCase()) {\n      case 'mobile':\n      case 'phone':\n        return <Smartphone size={16} className=\"text-primary\" />;\n      case 'laptop':\n        return <Laptop size={16} className=\"text-secondary\" />;\n      case 'tablet':\n        return <Tablet size={16} className=\"text-purple-600\" />;\n      case 'desktop':\n        return <Monitor size={16} className=\"text-gray-600\" />;\n      default:\n        return <Monitor size={16} className=\"text-gray-600\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">Active Sessions</h3>\n          <p className=\"text-sm text-gray-500\">Monitor connected users and their network usage</p>\n        </div>\n        <Button onClick={() => refetch()} className=\"flex items-center space-x-2\">\n          <RefreshCw size={16} />\n          <span>Refresh</span>\n        </Button>\n      </div>\n\n      {/* Live Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Connected Now</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {sessionStats.connectedUsers || sessions.length}\n                </p>\n              </div>\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse mr-2\"></div>\n                <Activity className=\"text-green-600\" size={20} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Bandwidth Used</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">2.4 Mbps</p>\n              </div>\n              <Gauge className=\"text-yellow-600\" size={32} />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Peak Today</p>\n                <p className=\"text-2xl font-bold text-primary\">\n                  {sessionStats.peakToday || 156}\n                </p>\n              </div>\n              <TrendingUp className=\"text-primary\" size={32} />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Avg. Duration</p>\n                <p className=\"text-2xl font-bold text-gray-700\">\n                  {sessionStats.avgDuration || '1.2h'}\n                </p>\n              </div>\n              <Clock className=\"text-gray-500\" size={32} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Sessions Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Sessions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>User</TableHead>\n                  <TableHead>Voucher</TableHead>\n                  <TableHead>Connected</TableHead>\n                  <TableHead>Data Used</TableHead>\n                  <TableHead>Time Left</TableHead>\n                  <TableHead>Speed</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {sessions.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                      No active sessions\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  sessions.map((session: any) => {\n                    const dataUsedPercent = session.voucher?.plan?.dataLimit \n                      ? (session.dataUsed / session.voucher.plan.dataLimit) * 100\n                      : 0;\n                    \n                    const timeConnected = Math.floor(\n                      (new Date().getTime() - new Date(session.startTime).getTime()) / (1000 * 60)\n                    );\n                    \n                    return (\n                      <TableRow key={session.id} className=\"hover:bg-gray-50\">\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary bg-opacity-10 rounded-full flex items-center justify-center\">\n                              {getDeviceIconComponent(session.deviceType)}\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">\n                                {session.ipAddress}\n                              </div>\n                              <div className=\"text-sm text-gray-500 capitalize\">\n                                {session.deviceType || 'Unknown'}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <code className=\"font-mono text-sm text-gray-900\">\n                            {session.voucher?.code || 'N/A'}\n                          </code>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-900\">\n                          {timeConnected}m ago\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-gray-900\">\n                            {formatBytes(session.dataUsed * 1024 * 1024)} / {' '}\n                            {session.voucher?.plan?.dataLimit \n                              ? formatBytes(session.voucher.plan.dataLimit * 1024 * 1024)\n                              : 'Unlimited'\n                            }\n                          </div>\n                          {session.voucher?.plan?.dataLimit && (\n                            <Progress value={dataUsedPercent} className=\"w-full mt-1\" />\n                          )}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-900\">\n                          {session.voucher?.plan?.duration \n                            ? `${Math.max(0, session.voucher.plan.duration - timeConnected)}m`\n                            : 'Unlimited'\n                          }\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-900\">\n                          <div>↓ 2.1 Mbps</div>\n                          <div>↑ 0.8 Mbps</div>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-900\"\n                            onClick={() => disconnectMutation.mutate(session.id)}\n                            disabled={disconnectMutation.isPending}\n                          >\n                            Disconnect\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10410},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Save, Wifi, Shield, Bell, Network } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst networkSettingsSchema = z.object({\n  ssid: z.string().min(1, \"WiFi network name is required\"),\n  gatewayIp: z.string().regex(/^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/, \"Invalid IP address\"),\n  dnsServers: z.string().min(1, \"DNS servers are required\"),\n  maxConcurrentUsers: z.number().min(1, \"Must be at least 1\").max(10000, \"Maximum 10,000 users\"),\n});\n\nconst voucherDefaultsSchema = z.object({\n  defaultDuration: z.number().min(1, \"Duration must be at least 1 minute\"),\n  defaultDataLimit: z.number().optional(),\n  defaultSpeedLimitDown: z.number().min(1, \"Download speed must be at least 1 Mbps\"),\n  defaultSpeedLimitUp: z.number().min(1, \"Upload speed must be at least 1 Mbps\"),\n  maxDevicesPerVoucher: z.number().min(1, \"Must allow at least 1 device\").max(10, \"Maximum 10 devices\"),\n});\n\nconst securitySettingsSchema = z.object({\n  contentFiltering: z.boolean(),\n  requireTermsAcceptance: z.boolean(),\n  sessionLogging: z.boolean(),\n  sessionTimeout: z.number().min(1, \"Timeout must be at least 1 minute\").max(1440, \"Maximum 24 hours\"),\n});\n\nconst notificationSettingsSchema = z.object({\n  emailNotifications: z.boolean(),\n  adminEmail: z.string().email(\"Invalid email address\").optional(),\n  lowCreditAlerts: z.boolean(),\n  alertThreshold: z.number().min(1, \"Threshold must be at least 1\"),\n});\n\ntype NetworkSettingsForm = z.infer<typeof networkSettingsSchema>;\ntype VoucherDefaultsForm = z.infer<typeof voucherDefaultsSchema>;\ntype SecuritySettingsForm = z.infer<typeof securitySettingsSchema>;\ntype NotificationSettingsForm = z.infer<typeof notificationSettingsSchema>;\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"network\");\n\n  useEffect(() => {\n    const event = new CustomEvent('pageChange', {\n      detail: {\n        title: 'System Settings',\n        subtitle: 'Configure your WiFi voucher system preferences'\n      }\n    });\n    window.dispatchEvent(event);\n  }, []);\n\n  const { data: settings = [], isLoading } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  // Convert settings array to object for easier access\n  const settingsObj = settings.reduce((acc: any, setting: any) => {\n    acc[setting.key] = setting.value;\n    return acc;\n  }, {});\n\n  const networkForm = useForm<NetworkSettingsForm>({\n    resolver: zodResolver(networkSettingsSchema),\n    defaultValues: {\n      ssid: \"Guest-WiFi\",\n      gatewayIp: \"192.168.1.1\",\n      dnsServers: \"8.8.8.8, 8.8.4.4\",\n      maxConcurrentUsers: 200,\n    },\n  });\n\n  const voucherForm = useForm<VoucherDefaultsForm>({\n    resolver: zodResolver(voucherDefaultsSchema),\n    defaultValues: {\n      defaultDuration: 120, // 2 hours in minutes\n      defaultDataLimit: 1024, // 1GB in MB\n      defaultSpeedLimitDown: 10,\n      defaultSpeedLimitUp: 5,\n      maxDevicesPerVoucher: 3,\n    },\n  });\n\n  const securityForm = useForm<SecuritySettingsForm>({\n    resolver: zodResolver(securitySettingsSchema),\n    defaultValues: {\n      contentFiltering: true,\n      requireTermsAcceptance: true,\n      sessionLogging: true,\n      sessionTimeout: 30,\n    },\n  });\n\n  const notificationForm = useForm<NotificationSettingsForm>({\n    resolver: zodResolver(notificationSettingsSchema),\n    defaultValues: {\n      emailNotifications: true,\n      adminEmail: \"admin@example.com\",\n      lowCreditAlerts: true,\n      alertThreshold: 50,\n    },\n  });\n\n  // Update forms when settings load\n  useEffect(() => {\n    if (settings.length > 0) {\n      networkForm.reset({\n        ssid: settingsObj.ssid || \"Guest-WiFi\",\n        gatewayIp: settingsObj.gatewayIp || \"192.168.1.1\",\n        dnsServers: settingsObj.dnsServers || \"8.8.8.8, 8.8.4.4\",\n        maxConcurrentUsers: parseInt(settingsObj.maxConcurrentUsers) || 200,\n      });\n\n      voucherForm.reset({\n        defaultDuration: parseInt(settingsObj.defaultDuration) || 120,\n        defaultDataLimit: parseInt(settingsObj.defaultDataLimit) || 1024,\n        defaultSpeedLimitDown: parseInt(settingsObj.defaultSpeedLimitDown) || 10,\n        defaultSpeedLimitUp: parseInt(settingsObj.defaultSpeedLimitUp) || 5,\n        maxDevicesPerVoucher: parseInt(settingsObj.maxDevicesPerVoucher) || 3,\n      });\n\n      securityForm.reset({\n        contentFiltering: settingsObj.contentFiltering === \"true\",\n        requireTermsAcceptance: settingsObj.requireTermsAcceptance === \"true\",\n        sessionLogging: settingsObj.sessionLogging === \"true\",\n        sessionTimeout: parseInt(settingsObj.sessionTimeout) || 30,\n      });\n\n      notificationForm.reset({\n        emailNotifications: settingsObj.emailNotifications === \"true\",\n        adminEmail: settingsObj.adminEmail || \"admin@example.com\",\n        lowCreditAlerts: settingsObj.lowCreditAlerts === \"true\",\n        alertThreshold: parseInt(settingsObj.alertThreshold) || 50,\n      });\n    }\n  }, [settings, settingsObj, networkForm, voucherForm, securityForm, notificationForm]);\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: { key: string; value: string }) => {\n      await apiRequest(\"PUT\", `/api/settings/${data.key}`, { value: data.value });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Settings updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveAllSettings = async () => {\n    try {\n      const networkData = networkForm.getValues();\n      const voucherData = voucherForm.getValues();\n      const securityData = securityForm.getValues();\n      const notificationData = notificationForm.getValues();\n\n      // Save all settings\n      const updates = [\n        ...Object.entries(networkData).map(([key, value]) => ({ key, value: String(value) })),\n        ...Object.entries(voucherData).map(([key, value]) => ({ key, value: String(value) })),\n        ...Object.entries(securityData).map(([key, value]) => ({ key, value: String(value) })),\n        ...Object.entries(notificationData).map(([key, value]) => ({ key, value: String(value) })),\n      ];\n\n      await Promise.all(updates.map(update => updateSettingsMutation.mutateAsync(update)));\n    } catch (error) {\n      // Error handled by mutation\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-96 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">System Settings</h3>\n          <p className=\"text-sm text-gray-500\">Configure your WiFi voucher system preferences</p>\n        </div>\n        <Button \n          onClick={saveAllSettings}\n          disabled={updateSettingsMutation.isPending}\n          className=\"flex items-center space-x-2\"\n        >\n          <Save size={16} />\n          <span>{updateSettingsMutation.isPending ? \"Saving...\" : \"Save All\"}</span>\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Network Settings */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center space-x-2\">\n            <Network className=\"text-primary\" size={20} />\n            <CardTitle>Network Configuration</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...networkForm}>\n              <div className=\"space-y-4\">\n                <FormField\n                  control={networkForm.control}\n                  name=\"ssid\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>WiFi Network Name (SSID)</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={networkForm.control}\n                  name=\"gatewayIp\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Gateway IP Address</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={networkForm.control}\n                  name=\"dnsServers\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>DNS Servers</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={networkForm.control}\n                  name=\"maxConcurrentUsers\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Maximum Concurrent Users</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Voucher Defaults */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center space-x-2\">\n            <Wifi className=\"text-green-600\" size={20} />\n            <CardTitle>Default Voucher Settings</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...voucherForm}>\n              <div className=\"space-y-4\">\n                <FormField\n                  control={voucherForm.control}\n                  name=\"defaultDuration\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Default Duration (minutes)</FormLabel>\n                      <Select \n                        onValueChange={(value) => field.onChange(parseInt(value))}\n                        value={field.value?.toString()}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"120\">2 hours</SelectItem>\n                          <SelectItem value=\"240\">4 hours</SelectItem>\n                          <SelectItem value=\"1440\">24 hours</SelectItem>\n                          <SelectItem value=\"10080\">7 days</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={voucherForm.control}\n                  name=\"defaultDataLimit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Default Data Limit (MB)</FormLabel>\n                      <Select \n                        onValueChange={(value) => field.onChange(value === \"unlimited\" ? undefined : parseInt(value))}\n                        value={field.value?.toString() || \"unlimited\"}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"500\">500 MB</SelectItem>\n                          <SelectItem value=\"1024\">1 GB</SelectItem>\n                          <SelectItem value=\"5120\">5 GB</SelectItem>\n                          <SelectItem value=\"unlimited\">Unlimited</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <FormField\n                    control={voucherForm.control}\n                    name=\"defaultSpeedLimitDown\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Download (Mbps)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={voucherForm.control}\n                    name=\"defaultSpeedLimitUp\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Upload (Mbps)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={voucherForm.control}\n                  name=\"maxDevicesPerVoucher\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Max Devices per Voucher</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Security Settings */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center space-x-2\">\n            <Shield className=\"text-yellow-600\" size={20} />\n            <CardTitle>Security & Access Control</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...securityForm}>\n              <div className=\"space-y-4\">\n                <FormField\n                  control={securityForm.control}\n                  name=\"contentFiltering\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Enable Content Filtering</FormLabel>\n                        <p className=\"text-xs text-gray-500\">Block access to inappropriate websites</p>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={securityForm.control}\n                  name=\"requireTermsAcceptance\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Require Terms Acceptance</FormLabel>\n                        <p className=\"text-xs text-gray-500\">Users must agree to terms before connecting</p>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={securityForm.control}\n                  name=\"sessionLogging\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Session Logging</FormLabel>\n                        <p className=\"text-xs text-gray-500\">Keep detailed logs of user sessions</p>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={securityForm.control}\n                  name=\"sessionTimeout\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Session Timeout (minutes)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Form>\n          </CardContent>\n        </Card>\n\n        {/* Notification Settings */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center space-x-2\">\n            <Bell className=\"text-purple-600\" size={20} />\n            <CardTitle>Notifications & Alerts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...notificationForm}>\n              <div className=\"space-y-4\">\n                <FormField\n                  control={notificationForm.control}\n                  name=\"emailNotifications\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Email Notifications</FormLabel>\n                        <p className=\"text-xs text-gray-500\">Receive system alerts via email</p>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={notificationForm.control}\n                  name=\"adminEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Admin Email</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={notificationForm.control}\n                  name=\"lowCreditAlerts\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center justify-between\">\n                      <div>\n                        <FormLabel>Low Credit Alerts</FormLabel>\n                        <p className=\"text-xs text-gray-500\">Alert when vouchers are running low</p>\n                      </div>\n                      <FormControl>\n                        <Switch\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={notificationForm.control}\n                  name=\"alertThreshold\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Alert Threshold (vouchers remaining)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22815},"client/src/pages/vouchers.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Ticket, CheckCircle, Clock } from \"lucide-react\";\nimport CreateVoucherModal from \"@/components/modals/create-voucher-modal\";\nimport { getStatusColor, formatDuration } from \"@/lib/utils\";\n\nexport default function Vouchers() {\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    const event = new CustomEvent('pageChange', {\n      detail: {\n        title: 'Voucher Management',\n        subtitle: 'Create and manage WiFi access vouchers'\n      }\n    });\n    window.dispatchEvent(event);\n  }, []);\n\n  const { data: vouchers = [], isLoading } = useQuery({\n    queryKey: [\"/api/vouchers\"],\n  });\n\n  const { data: stats = {} } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const filteredVouchers = vouchers.filter((voucher: any) => {\n    const matchesStatus = statusFilter === \"all\" || voucher.status === statusFilter;\n    const matchesSearch = voucher.code.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">Voucher Management</h3>\n          <p className=\"text-sm text-gray-500\">Create and manage WiFi access vouchers</p>\n        </div>\n        <Button onClick={() => setShowCreateModal(true)} className=\"flex items-center space-x-2\">\n          <Plus size={16} />\n          <span>Create Vouchers</span>\n        </Button>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Vouchers</p>\n                <p className=\"text-2xl font-bold text-gray-900\">5,432</p>\n              </div>\n              <Ticket className=\"text-primary\" size={32} />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Active</p>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.activeVouchers || 0}</p>\n              </div>\n              <CheckCircle className=\"text-green-600\" size={32} />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Expired</p>\n                <p className=\"text-2xl font-bold text-gray-500\">3,198</p>\n              </div>\n              <Clock className=\"text-gray-500\" size={32} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Voucher Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Vouchers</CardTitle>\n            <div className=\"flex items-center space-x-3\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"used\">Used</SelectItem>\n                  <SelectItem value=\"expired\">Expired</SelectItem>\n                </SelectContent>\n              </Select>\n              <Input\n                placeholder=\"Search vouchers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-64\"\n              />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Voucher Code</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Duration</TableHead>\n                  <TableHead>Data Limit</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Created</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredVouchers.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                      No vouchers found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredVouchers.map((voucher: any) => (\n                    <TableRow key={voucher.id} className=\"hover:bg-gray-50\">\n                      <TableCell>\n                        <code className=\"font-mono text-sm font-medium text-gray-900\">\n                          {voucher.code}\n                        </code>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {voucher.plan?.name || 'Custom'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {voucher.plan?.duration ? formatDuration(voucher.plan.duration) : 'N/A'}\n                      </TableCell>\n                      <TableCell>\n                        {voucher.plan?.dataLimit ? `${voucher.plan.dataLimit} MB` : 'Unlimited'}\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(voucher.status)}>\n                          {voucher.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {new Date(voucher.createdAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-primary hover:text-primary-dark\">\n                            Edit\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600 hover:text-red-900\">\n                            Delete\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n          \n          {/* Pagination */}\n          <div className=\"flex items-center justify-between mt-4 pt-4 border-t\">\n            <div>\n              <p className=\"text-sm text-gray-700\">\n                Showing {Math.min(filteredVouchers.length, 10)} of {filteredVouchers.length} results\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\">Previous</Button>\n              <Button size=\"sm\">1</Button>\n              <Button variant=\"outline\" size=\"sm\">2</Button>\n              <Button variant=\"outline\" size=\"sm\">3</Button>\n              <Button variant=\"outline\" size=\"sm\">Next</Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <CreateVoucherModal \n        open={showCreateModal} \n        onOpenChange={setShowCreateModal} \n      />\n    </div>\n  );\n}\n","size_bytes":8771},"client/src/components/charts/usage-chart.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\ninterface UsageChartProps {\n  data?: number[];\n  labels?: string[];\n}\n\nexport default function UsageChart({ \n  data = [12, 19, 43, 78, 65, 34], \n  labels = ['00:00', '04:00', '08:00', '12:00', '16:00', '20:00'] \n}: UsageChartProps) {\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: 'rgb(243, 244, 246)',\n        },\n      },\n      x: {\n        grid: {\n          display: false,\n        },\n      },\n    },\n  };\n\n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: 'Active Users',\n        data,\n        borderColor: 'rgb(59, 130, 246)',\n        backgroundColor: 'rgba(59, 130, 246, 0.1)',\n        tension: 0.4,\n        fill: true,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"h-64\">\n      <Line options={options} data={chartData} />\n    </div>\n  );\n}\n","size_bytes":1318},"client/src/components/charts/voucher-distribution.tsx":{"content":"import {\n  Chart as ChartJS,\n  ArcElement,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\ninterface VoucherDistributionProps {\n  data?: number[];\n  labels?: string[];\n}\n\nexport default function VoucherDistribution({ \n  data = [45, 35, 20], \n  labels = ['Premium', 'Standard', 'Basic'] \n}: VoucherDistributionProps) {\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom' as const,\n      },\n    },\n  };\n\n  const chartData = {\n    labels,\n    datasets: [\n      {\n        data,\n        backgroundColor: [\n          'rgb(59, 130, 246)',\n          'rgb(99, 102, 241)',\n          'rgb(139, 92, 246)',\n        ],\n        borderWidth: 0,\n      },\n    ],\n  };\n\n  return (\n    <div className=\"h-64\">\n      <Doughnut options={options} data={chartData} />\n    </div>\n  );\n}\n","size_bytes":926},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Bell, Moon, Sun, Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n  onPageChange?: (title: string, subtitle: string) => void;\n}\n\nexport default function Header({ title, subtitle }: HeaderProps) {\n  const [isDark, setIsDark] = useState(false);\n\n  const toggleTheme = () => {\n    setIsDark(!isDark);\n    if (!isDark) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold text-gray-900\">{title}</h2>\n          <p className=\"text-sm text-gray-500\">{subtitle}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleTheme}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            {isDark ? <Sun size={18} /> : <Moon size={18} />}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <Bell size={18} />\n          </Button>\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search...\"\n              className=\"pl-10 pr-4 py-2 w-64\"\n            />\n            <Search \n              size={16} \n              className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\n            />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1851},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  BarChart3, \n  Ticket, \n  Users, \n  Globe, \n  TrendingUp, \n  Settings, \n  Wifi,\n  LogOut,\n  Router\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/admin\", icon: BarChart3 },\n  { name: \"Vouchers\", href: \"/admin/vouchers\", icon: Ticket },\n  { name: \"Active Sessions\", href: \"/admin/sessions\", icon: Users },\n  { name: \"Network Equipment\", href: \"/admin/network\", icon: Router },\n  { name: \"Captive Portal\", href: \"/admin/portal\", icon: Globe },\n  { name: \"Analytics\", href: \"/admin/analytics\", icon: TrendingUp },\n  { name: \"Settings\", href: \"/admin/settings\", icon: Settings },\n];\n\ninterface SidebarProps {\n  onLogout?: () => void;\n}\n\nexport default function Sidebar({ onLogout }: SidebarProps) {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg border-r border-gray-200 flex flex-col\">\n      {/* Logo */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Wifi className=\"text-white\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-gray-900\">WiFi Manager</h1>\n            <p className=\"text-sm text-gray-500\">Voucher System</p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"flex-1 p-4\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <li key={item.name}>\n                <Link href={item.href}>\n                  <a\n                    className={cn(\n                      \"flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors\",\n                      isActive\n                        ? \"bg-primary text-white\"\n                        : \"text-gray-700 hover:bg-gray-100\"\n                    )}\n                  >\n                    <item.icon size={18} />\n                    <span>{item.name}</span>\n                  </a>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      \n      {/* Admin Profile */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <img \n            src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\" \n            alt=\"Admin Avatar\" \n            className=\"w-10 h-10 rounded-full object-cover\"\n          />\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-gray-900\">John Admin</p>\n            <p className=\"text-xs text-gray-500\">Administrator</p>\n          </div>\n          <button \n            className=\"text-gray-400 hover:text-gray-600\"\n            onClick={onLogout}\n            title=\"Logout\"\n          >\n            <LogOut size={16} />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3162},"client/src/components/modals/create-voucher-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst createVoucherSchema = z.object({\n  planId: z.number().min(1, \"Please select a voucher type\"),\n  quantity: z.number().min(1, \"Quantity must be at least 1\").max(1000, \"Maximum 1000 vouchers\"),\n  validUntil: z.string().optional(),\n  price: z.number().min(0).optional(),\n});\n\ntype CreateVoucherForm = z.infer<typeof createVoucherSchema>;\n\ninterface CreateVoucherModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function CreateVoucherModal({ open, onOpenChange }: CreateVoucherModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateVoucherForm>({\n    resolver: zodResolver(createVoucherSchema),\n    defaultValues: {\n      quantity: 10,\n    },\n  });\n\n  // Fetch voucher plans\n  const { data: plans = [] } = useQuery({\n    queryKey: [\"/api/voucher-plans\"],\n  });\n\n  const createVouchersMutation = useMutation({\n    mutationFn: async (data: CreateVoucherForm) => {\n      await apiRequest(\"POST\", \"/api/vouchers/generate\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Vouchers created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/vouchers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateVoucherForm) => {\n    createVouchersMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create Vouchers</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"planId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Voucher Type</FormLabel>\n                    <Select \n                      onValueChange={(value) => field.onChange(parseInt(value))}\n                      value={field.value?.toString()}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select voucher type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {plans.map((plan: any) => (\n                          <SelectItem key={plan.id} value={plan.id.toString()}>\n                            {plan.name} ({plan.duration}min, {plan.dataLimit ? `${plan.dataLimit}MB` : 'Unlimited'})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"quantity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quantity</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min={1} \n                        max={1000}\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"validUntil\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Validity Period (Optional)</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Price (Optional)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createVouchersMutation.isPending}\n              >\n                {createVouchersMutation.isPending ? \"Creating...\" : \"Generate Vouchers\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6444},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}